[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BioEngineering Statistics Computational Tools",
    "section": "",
    "text": "Preface\nThis is a Quarto book that contains helpful R and other scripting material for BioE610 - Bioengineering Statistics at the University of Oregon.\nTo learn more about Quarto books visit https://quarto.org/docs/books.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This book contains a lot of R scripts, tips and tricks that will be useful for students in BioE610 - Bioengineering Statistics at the University of Oregon.\nThis is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "R_basics.html",
    "href": "R_basics.html",
    "title": "2  R basics",
    "section": "",
    "text": "2.1 Math and assigning variables\n3+4\n\n[1] 7\n\ny &lt;- 3+4\n\ny\n\n[1] 7\n\ny_log &lt;- log(y)\n\ny_log\n\n[1] 1.94591",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "6  Summary",
    "section": "",
    "text": "To be written",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "R_basics.html#section",
    "href": "R_basics.html#section",
    "title": "2  R basics",
    "section": "3.1 ",
    "text": "3.1 \n\nR is a statistical programming language (derived from S)\nSuperb data management & graphics capabilities\nYou can write your own functions\nPowerful and flexible\nRuns on all computer platforms\nWell established system of packages and documentation\nActive development and dedicated community\nCan use a nice GUI front end such as Rstudio\nReproducibility\n\nkeep your scripts to see exactly what was done\ndistribute these with your data\nembed your R analyses in polished RMarkdown files\n\nFREE",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#section-1",
    "href": "R_basics.html#section-1",
    "title": "2  R basics",
    "section": "3.2 ",
    "text": "3.2",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#r-resources",
    "href": "R_basics.html#r-resources",
    "title": "2  R basics",
    "section": "3.3 R resources",
    "text": "3.3 R resources\n\nThe R Project Homepage: http://www.r-project.org\nQuick R Homepage: http://www.statmethods.net\nBioconductor: http://www.bioconductor.org\n\nAn Introduction to R (long!): http://cran.r-project.org/doc/manuals/R-intro.html\nR for Data Science: https://r4ds.had.co.nz\nGoogle - tutorials, guides, demos, packages and more",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#running-r",
    "href": "R_basics.html#running-r",
    "title": "2  R basics",
    "section": "3.4 Running R",
    "text": "3.4 Running R\n\nNeed to make sure that you have R installed\n\nlocally or on a server\nhttps://www.r-project.org\n\nRun R from the command line\n\njust type R\ncan run it locally as well as on clusters\n\nInstall a R Integrated Development Environment (IDE)\n\nRStudio: http://www.rstudio.com\nMakes working with R much easier, particularly for a new R user\nRun on Windows, Mac or Linux OS\nWe’re running as a server on the AWS instances",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#rstudio",
    "href": "R_basics.html#rstudio",
    "title": "2  R basics",
    "section": "3.5 RStudio",
    "text": "3.5 RStudio",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#exercise-1.1---exploring-rstudio",
    "href": "R_basics.html#exercise-1.1---exploring-rstudio",
    "title": "2  R basics",
    "section": "3.6 Exercise 1.1 - Exploring RStudio",
    "text": "3.6 Exercise 1.1 - Exploring RStudio\n\nOpen RStudio by adding :8787 to your AMI url\n\nTake a few minutes to familiarize yourself with the Rstudio environment by locating the following features:\n\nSee what types of new files can be made in Rstudio by clicking the top left icon- open a new R script.\nThe windows clockwise from top left are: the code editor, the workspace and history, the plots and files window, and the R console.\nIn the plots and files window, click on the packages and help tabs to see what they offer.\n\nNow open the file called Exercises_for_R_Lectures.Rmd in /workshop_materials/evomics_stat_2019/03.Exercises/\n\nThis file will serve as your digital notebook for parts of the workshop and contains the other exercises.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#rmarkdown",
    "href": "R_basics.html#rmarkdown",
    "title": "2  R basics",
    "section": "4.1 RMarkdown",
    "text": "4.1 RMarkdown\n\nA great way to embed R code into descriptive files to keep your life organized\n\nhttp://kbroman.org/knitr_knutshell/pages/Rmarkdown.html\nhttps://bookdown.org/yihui/rmarkdown/\nhttps://bookdown.org/yihui/bookdown/\n\nYou can insert R chunks into Rmarkdown documents\nYou will be doing more with markdown on Thursday",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#exercise-1.2---intro-to-rmarkdown-files",
    "href": "R_basics.html#exercise-1.2---intro-to-rmarkdown-files",
    "title": "2  R basics",
    "section": "4.2 Exercise 1.2 - Intro to RMarkdown Files",
    "text": "4.2 Exercise 1.2 - Intro to RMarkdown Files\n\nTake a few minutes to familiarize yourself with RMarkdown files by completing exercise 1.2 in your exercises document.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#basics-of-r-1",
    "href": "R_basics.html#basics-of-r-1",
    "title": "2  R basics",
    "section": "5.1 BASICS of R",
    "text": "5.1 BASICS of R\n\nCommands can be submitted through\n\nterminal, console or scripts\ncan be embedded as code chunks in RMarkdown\n\nOn these slides evaluating code chunks and showing output\n\nshown here after the two # symbols\nthe number of output items is in []\n\nR follows the normal priority of mathematical evaluation (PEDMAS)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#basics-of-r-2",
    "href": "R_basics.html#basics-of-r-2",
    "title": "2  R basics",
    "section": "5.2 BASICS of R",
    "text": "5.2 BASICS of R\nInput code chunk and then output\n\n4*4\n\n[1] 16\n\n\nInput code chunk and then output\n\n(4+3*2^2)\n\n[1] 16",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#assigning-variables",
    "href": "R_basics.html#assigning-variables",
    "title": "2  R basics",
    "section": "5.3 Assigning Variables",
    "text": "5.3 Assigning Variables\n\nA better way to do this is to assign variables\nVariables are assigned values using the &lt;- operator.\nVariable names must begin with a letter, but other than that, just about anything goes.\nDo keep in mind that R is case sensitive.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#assigning-variables-1",
    "href": "R_basics.html#assigning-variables-1",
    "title": "2  R basics",
    "section": "5.4 Assigning Variables",
    "text": "5.4 Assigning Variables\n\nx &lt;- 2\nx*3\n\n[1] 6\n\ny &lt;- x * 3\ny-2\n\n[1] 4\n\n\nThese do not work\n\n3y &lt;- 3\n3*y &lt;- 3",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#arithmetic-operations-on-functions",
    "href": "R_basics.html#arithmetic-operations-on-functions",
    "title": "2  R basics",
    "section": "5.5 Arithmetic operations on functions",
    "text": "5.5 Arithmetic operations on functions\n\nArithmetic operations can be performed easily on functions as well as numbers.\n\n\nx &lt;- 12\nx+2\n\n[1] 14\n\nx^2\n\n[1] 144\n\nlog(x)\n\n[1] 2.484907",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#arithmetic-operations-on-functions-1",
    "href": "R_basics.html#arithmetic-operations-on-functions-1",
    "title": "2  R basics",
    "section": "5.6 Arithmetic operations on functions",
    "text": "5.6 Arithmetic operations on functions\n\nNote that the last of these - log - is a built in function of R, and therefore the object of the function needs to be put in parentheses\nThese parentheses will be important, and we’ll come back to them later when we add arguments after the object in the parentheses\n\nThe outcome of calculations can be assigned to new variables as well, and the results can be checked using the print command",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#arithmetic-operations-on-functions-2",
    "href": "R_basics.html#arithmetic-operations-on-functions-2",
    "title": "2  R basics",
    "section": "5.7 Arithmetic operations on functions",
    "text": "5.7 Arithmetic operations on functions\n\ny &lt;- 67\nprint(y)\n\n[1] 67\n\nx &lt;- 124\nz &lt;- (x*y)^2\nprint(z)\n\n[1] 69022864",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#strings",
    "href": "R_basics.html#strings",
    "title": "2  R basics",
    "section": "5.8 STRINGS",
    "text": "5.8 STRINGS\n\nOperations can be performed on character variables as well\nNote that “characters” need to be set off by quotation marks to differentiate them from numbers\nThe c stands for concatenate\nNote that we are using the same variable names as we did previously, which means that we’re overwriting our previous assignment\nA good rule of thumb is to use new names for each variable, and make them short but still descriptive",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#strings-1",
    "href": "R_basics.html#strings-1",
    "title": "2  R basics",
    "section": "5.9 STRINGS",
    "text": "5.9 STRINGS\n\nx &lt;- \"I Love\"\nprint (x)\n\n[1] \"I Love\"\n\ny &lt;- \"Biostatistics\"\nprint (y)\n\n[1] \"Biostatistics\"\n\nz &lt;- c(x,y)\nprint (z)\n\n[1] \"I Love\"        \"Biostatistics\"",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#vectors",
    "href": "R_basics.html#vectors",
    "title": "2  R basics",
    "section": "5.10 VECTORS",
    "text": "5.10 VECTORS\n\nIn general R thinks in terms of vectors\n\na list of characters, factors or numerical values (“I Love”)\nit will benefit any R user to try to write scripts with that in mind\nit will simplify most things\n\nVectors can be assigned directly using the ‘c()’ function and then entering the exact values.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#vectors-1",
    "href": "R_basics.html#vectors-1",
    "title": "2  R basics",
    "section": "5.11 VECTORS",
    "text": "5.11 VECTORS\n\nn &lt;- c(2,3,4,2,1,2,4,5,10,8,9)\nprint(n)\n\n [1]  2  3  4  2  1  2  4  5 10  8  9\n\n\n\nz &lt;- n +3\nprint(z)\n\n [1]  5  6  7  5  4  5  7  8 13 11 12",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#factors",
    "href": "R_basics.html#factors",
    "title": "2  R basics",
    "section": "5.12 FACTORS",
    "text": "5.12 FACTORS\n\nThe vector x is now what is called a list of character values (“I Love”).\nSometimes we would like to treat the characters as if they were units for subsequent calculations.\nThese are called factors, and we can redefine our character variables as factors.\nThis might seem a bit strange, but it’s important for statistical analyses where we might want to see the mean or variance for two different treatments.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#factors-1",
    "href": "R_basics.html#factors-1",
    "title": "2  R basics",
    "section": "5.13 FACTORS",
    "text": "5.13 FACTORS\n\nx_factor &lt;- as.factor(x)\nprint (x_factor)\n\n[1] I Love\nLevels: I Love\n\n\n\nNote that factor levels are reported alphabetically",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#factors-2",
    "href": "R_basics.html#factors-2",
    "title": "2  R basics",
    "section": "5.14 FACTORS",
    "text": "5.14 FACTORS\n\nWe can also determine how R “sees” a variable using str() or class() functions.\nThis is a useful check when importing datasets or verifying that you assigned a class correctly\n\n\nstr(x)\n\n chr \"I Love\"\n\nclass(x)\n\n[1] \"character\"",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#types-or-classes-of-vectors-of-data",
    "href": "R_basics.html#types-or-classes-of-vectors-of-data",
    "title": "2  R basics",
    "section": "5.15 Types or ‘classes’ of vectors of data",
    "text": "5.15 Types or ‘classes’ of vectors of data",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#types-of-vectors-of-data",
    "href": "R_basics.html#types-of-vectors-of-data",
    "title": "2  R basics",
    "section": "5.16 Types of vectors of data",
    "text": "5.16 Types of vectors of data\n\nint stands for integers\ndbl stands for doubles, or real numbers\nchr stands for character vectors, or strings\ndttm stands for date-times (a date + a time)\nlgl stands for logical, vectors that contain only TRUE or FALSE\nfctr stands for factors, which R uses to represent categorical variables with fixed possible values\ndate stands for dates",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#types-of-vectors-of-data-1",
    "href": "R_basics.html#types-of-vectors-of-data-1",
    "title": "2  R basics",
    "section": "5.17 Types of vectors of data",
    "text": "5.17 Types of vectors of data\n\nLogical vectors can take only three possible values:\n\nFALSE\nTRUE\nNA which is ‘not available’.\n\nInteger and double vectors are known collectively as numeric vectors.\n\nIn R numbers are doubles by default.\n\nIntegers have one special value: NA, while doubles have four:\n\nNA\nNaN which is ‘not a number’\nInf\n-Inf",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#basic-statistics",
    "href": "R_basics.html#basic-statistics",
    "title": "2  R basics",
    "section": "5.18 Basic Statistics",
    "text": "5.18 Basic Statistics\nMany functions exist to operate on vectors.\n\nmean(n)\nmedian(n)\nvar(n)\nlog(n)\nexp(n)\nsqrt(n)\nsum(n)\nlength(n)\nsample(n, replace = T) #has an additional argument (replace=T)\n\n\nArguments modify or direct the function in some way\n\nThere are many arguments for each function, some of which are defaults\nTab complete is helpful to view argument options",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#getting-help",
    "href": "R_basics.html#getting-help",
    "title": "2  R basics",
    "section": "5.19 Getting Help",
    "text": "5.19 Getting Help\n\nGetting Help on any function is very easy - just type a question mark and the name of the function.\nThere are functions for just about anything within R and it is easy enough to write your own functions if none already exist to do what you want to do.\nIn general, function calls have a simple structure: a function name, a set of parentheses and an optional set of parameters/arguments to send to the function.\nHelp pages exist for all functions that, at a minimum, explain what parameters exist for the function.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#getting-help-1",
    "href": "R_basics.html#getting-help-1",
    "title": "2  R basics",
    "section": "5.20 Getting Help",
    "text": "5.20 Getting Help\n\n- help(mean)\n- ?mean\n- example(mean)\n- help.search(\"mean\")\n- apropos(\"mean\")\n- args(mean)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#creating-vectors",
    "href": "R_basics.html#creating-vectors",
    "title": "2  R basics",
    "section": "5.21 Creating vectors",
    "text": "5.21 Creating vectors\n\nCreating a vector of new data by entering it by hand can be a drag\nHowever, it is also very easy to use functions such as\n\nseq\nsample",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#creating-vectors-1",
    "href": "R_basics.html#creating-vectors-1",
    "title": "2  R basics",
    "section": "5.22 Creating vectors",
    "text": "5.22 Creating vectors\n\nWhat do the arguments mean?\n\n\nseq_1 &lt;- seq(0.0, 10.0, by = 0.1)\nprint(seq_1)\n\n  [1]  0.0  0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  1.0  1.1  1.2  1.3  1.4\n [16]  1.5  1.6  1.7  1.8  1.9  2.0  2.1  2.2  2.3  2.4  2.5  2.6  2.7  2.8  2.9\n [31]  3.0  3.1  3.2  3.3  3.4  3.5  3.6  3.7  3.8  3.9  4.0  4.1  4.2  4.3  4.4\n [46]  4.5  4.6  4.7  4.8  4.9  5.0  5.1  5.2  5.3  5.4  5.5  5.6  5.7  5.8  5.9\n [61]  6.0  6.1  6.2  6.3  6.4  6.5  6.6  6.7  6.8  6.9  7.0  7.1  7.2  7.3  7.4\n [76]  7.5  7.6  7.7  7.8  7.9  8.0  8.1  8.2  8.3  8.4  8.5  8.6  8.7  8.8  8.9\n [91]  9.0  9.1  9.2  9.3  9.4  9.5  9.6  9.7  9.8  9.9 10.0",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#creating-vectors-2",
    "href": "R_basics.html#creating-vectors-2",
    "title": "2  R basics",
    "section": "5.23 Creating vectors",
    "text": "5.23 Creating vectors\n\nseq_2 &lt;- seq(10.0, 0.0, by = -0.1)\nprint(seq_2)\n\n  [1] 10.0  9.9  9.8  9.7  9.6  9.5  9.4  9.3  9.2  9.1  9.0  8.9  8.8  8.7  8.6\n [16]  8.5  8.4  8.3  8.2  8.1  8.0  7.9  7.8  7.7  7.6  7.5  7.4  7.3  7.2  7.1\n [31]  7.0  6.9  6.8  6.7  6.6  6.5  6.4  6.3  6.2  6.1  6.0  5.9  5.8  5.7  5.6\n [46]  5.5  5.4  5.3  5.2  5.1  5.0  4.9  4.8  4.7  4.6  4.5  4.4  4.3  4.2  4.1\n [61]  4.0  3.9  3.8  3.7  3.6  3.5  3.4  3.3  3.2  3.1  3.0  2.9  2.8  2.7  2.6\n [76]  2.5  2.4  2.3  2.2  2.1  2.0  1.9  1.8  1.7  1.6  1.5  1.4  1.3  1.2  1.1\n [91]  1.0  0.9  0.8  0.7  0.6  0.5  0.4  0.3  0.2  0.1  0.0",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#creating-vectors-3",
    "href": "R_basics.html#creating-vectors-3",
    "title": "2  R basics",
    "section": "5.24 Creating vectors",
    "text": "5.24 Creating vectors\n\nseq_square &lt;- (seq_2)*(seq_2)\nprint(seq_square)\n\n  [1] 100.00  98.01  96.04  94.09  92.16  90.25  88.36  86.49  84.64  82.81\n [11]  81.00  79.21  77.44  75.69  73.96  72.25  70.56  68.89  67.24  65.61\n [21]  64.00  62.41  60.84  59.29  57.76  56.25  54.76  53.29  51.84  50.41\n [31]  49.00  47.61  46.24  44.89  43.56  42.25  40.96  39.69  38.44  37.21\n [41]  36.00  34.81  33.64  32.49  31.36  30.25  29.16  28.09  27.04  26.01\n [51]  25.00  24.01  23.04  22.09  21.16  20.25  19.36  18.49  17.64  16.81\n [61]  16.00  15.21  14.44  13.69  12.96  12.25  11.56  10.89  10.24   9.61\n [71]   9.00   8.41   7.84   7.29   6.76   6.25   5.76   5.29   4.84   4.41\n [81]   4.00   3.61   3.24   2.89   2.56   2.25   1.96   1.69   1.44   1.21\n [91]   1.00   0.81   0.64   0.49   0.36   0.25   0.16   0.09   0.04   0.01\n[101]   0.00",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#creating-vectors-4",
    "href": "R_basics.html#creating-vectors-4",
    "title": "2  R basics",
    "section": "5.25 Creating vectors",
    "text": "5.25 Creating vectors\n\nseq_square_new &lt;- (seq_2)^2\nprint(seq_square_new)\n\n  [1] 100.00  98.01  96.04  94.09  92.16  90.25  88.36  86.49  84.64  82.81\n [11]  81.00  79.21  77.44  75.69  73.96  72.25  70.56  68.89  67.24  65.61\n [21]  64.00  62.41  60.84  59.29  57.76  56.25  54.76  53.29  51.84  50.41\n [31]  49.00  47.61  46.24  44.89  43.56  42.25  40.96  39.69  38.44  37.21\n [41]  36.00  34.81  33.64  32.49  31.36  30.25  29.16  28.09  27.04  26.01\n [51]  25.00  24.01  23.04  22.09  21.16  20.25  19.36  18.49  17.64  16.81\n [61]  16.00  15.21  14.44  13.69  12.96  12.25  11.56  10.89  10.24   9.61\n [71]   9.00   8.41   7.84   7.29   6.76   6.25   5.76   5.29   4.84   4.41\n [81]   4.00   3.61   3.24   2.89   2.56   2.25   1.96   1.69   1.44   1.21\n [91]   1.00   0.81   0.64   0.49   0.36   0.25   0.16   0.09   0.04   0.01\n[101]   0.00",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#r-interlude",
    "href": "R_basics.html#r-interlude",
    "title": "2  R basics",
    "section": "5.26 R Interlude",
    "text": "5.26 R Interlude\nComplete Exercises 1.3-1.6",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#drawing-samples-from-distributions",
    "href": "R_basics.html#drawing-samples-from-distributions",
    "title": "2  R basics",
    "section": "5.26 Drawing samples from distributions",
    "text": "5.26 Drawing samples from distributions\n\nHere is a way to create your own data sets that are random samples…\n\n\nx &lt;- rnorm (n = 10000, mean = 0, sd = 10)\ny &lt;- sample (1:10000, 10000, replace = T)\nxy &lt;- cbind(x,y)\nplot(xy)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#drawing-samples-from-distributions-1",
    "href": "R_basics.html#drawing-samples-from-distributions-1",
    "title": "2  R basics",
    "section": "5.27 Drawing samples from distributions",
    "text": "5.27 Drawing samples from distributions\n\nx &lt;- rnorm (10000, 0, 10)\ny &lt;- sample (1:10000, 10000, replace = T)\nxy &lt;- cbind(x,y)\nhist(x)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#drawing-samples-from-distributions-2",
    "href": "R_basics.html#drawing-samples-from-distributions-2",
    "title": "2  R basics",
    "section": "5.28 Drawing samples from distributions",
    "text": "5.28 Drawing samples from distributions\n\nYou’ve probably figured out that y from the last example is drawing numbers with equal probability.\nWhat if you want to draw from a distribution?\nAgain, play around with the arguments in the parentheses to see what happens.\n\n\nx &lt;- rnorm (10000, 0, 10)\ny &lt;- sample (???, 10000, replace = ???)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#drawing-samples-from-distributions-3",
    "href": "R_basics.html#drawing-samples-from-distributions-3",
    "title": "2  R basics",
    "section": "5.29 Drawing samples from distributions",
    "text": "5.29 Drawing samples from distributions\n\ndnorm() generates the probability density, which can be plotted using the curve() function.\nNote that is curve is added to the plot using add=TRUE\n\n\nx &lt;-rnorm(1000, 0, 100)\nhist(x, xlim = c(-500,500))\ncurve(50000*dnorm(x, 0, 100), xlim = c(-500,500), add=TRUE, col='Red')",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html",
    "href": "Tidyverse.html",
    "title": "4  Tidyverse",
    "section": "",
    "text": "4.1 The tidyverse\nA collection of packages particularly helpful for working with tables.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#the-tidyverse",
    "href": "Tidyverse.html#the-tidyverse",
    "title": "4  Tidyverse",
    "section": "",
    "text": "dplyr - manipulating data frames\nggplot2 - data visualization\nreadr - importing data\nstringr - string manipulation\nlubridate - dates and times\npurrr package for working with functions",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#the-tidyverse-1",
    "href": "Tidyverse.html#the-tidyverse-1",
    "title": "4  Tidyverse",
    "section": "4.2 The tidyverse",
    "text": "4.2 The tidyverse\nLoad the main packages like this:\n\nlibrary(tidyverse)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#tidy-data",
    "href": "Tidyverse.html#tidy-data",
    "title": "4  Tidyverse",
    "section": "4.3 Tidy data",
    "text": "4.3 Tidy data\n\nEach row represents one observation\nColumns represent the different variables",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#tidy-data-1",
    "href": "Tidyverse.html#tidy-data-1",
    "title": "4  Tidyverse",
    "section": "4.4 Tidy data",
    "text": "4.4 Tidy data\nThe murders dataset is an example of a tidy data frame.\n\nlibrary(dslabs)\ndata(murders)\nhead(murders)\n\n       state abb region population total\n1    Alabama  AL  South    4779736   135\n2     Alaska  AK   West     710231    19\n3    Arizona  AZ   West    6392017   232\n4   Arkansas  AR  South    2915918    93\n5 California  CA   West   37253956  1257\n6   Colorado  CO   West    5029196    65",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#wide-data",
    "href": "Tidyverse.html#wide-data",
    "title": "4  Tidyverse",
    "section": "4.5 Wide data",
    "text": "4.5 Wide data\nThis is not tidy:\n\n\n      country 1960 1961 1962 1963 1964 1965\n1     Germany 2.41 2.44 2.47 2.49 2.49 2.48\n2 South Korea 6.16 5.99 5.79 5.57 5.36 5.16\n\n\nLater we learn how to wrangle into tidy format.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#tidy-data-2",
    "href": "Tidyverse.html#tidy-data-2",
    "title": "4  Tidyverse",
    "section": "4.6 Tidy data",
    "text": "4.6 Tidy data\nSame information in tidy format.\n\n\n       country year fertility\n1      Germany 1960      2.41\n2  South Korea 1960      6.16\n3      Germany 1961      2.44\n4  South Korea 1961      5.99\n5      Germany 1962      2.47\n6  South Korea 1962      5.79\n7      Germany 1963      2.49\n8  South Korea 1963      5.57\n9      Germany 1964      2.49\n10 South Korea 1964      5.36\n11     Germany 1965      2.48\n12 South Korea 1965      5.16",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#manipulating-data-frames-with-dplyr",
    "href": "Tidyverse.html#manipulating-data-frames-with-dplyr",
    "title": "4  Tidyverse",
    "section": "4.7 Manipulating data frames with dplyr",
    "text": "4.7 Manipulating data frames with dplyr\n\nmutate - change or add columns\n\nfilter- filter rows based on a rule\nselect - Subset the data by selecting specific columns",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#adding-a-column-with-mutate",
    "href": "Tidyverse.html#adding-a-column-with-mutate",
    "title": "4  Tidyverse",
    "section": "4.8 Adding a column with mutate",
    "text": "4.8 Adding a column with mutate\n\ndata(\"murders\")\nmurders &lt;- mutate(murders, rate = total / population * 100000)\n\nNotice that here we used total and population inside the function, which are objects that are not defined in our workspace.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#adding-a-column-with-mutate-1",
    "href": "Tidyverse.html#adding-a-column-with-mutate-1",
    "title": "4  Tidyverse",
    "section": "4.9 Adding a column with mutate",
    "text": "4.9 Adding a column with mutate\nWe can see the new column now\n\nhead(murders)\n\n       state abb region population total     rate\n1    Alabama  AL  South    4779736   135 2.824424\n2     Alaska  AK   West     710231    19 2.675186\n3    Arizona  AZ   West    6392017   232 3.629527\n4   Arkansas  AR  South    2915918    93 3.189390\n5 California  CA   West   37253956  1257 3.374138\n6   Colorado  CO   West    5029196    65 1.292453",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#subsetting-with-filter",
    "href": "Tidyverse.html#subsetting-with-filter",
    "title": "4  Tidyverse",
    "section": "4.10 Subsetting with filter",
    "text": "4.10 Subsetting with filter\n\nfilter(murders, rate &lt;= 0.71)\n\n          state abb        region population total      rate\n1        Hawaii  HI          West    1360301     7 0.5145920\n2          Iowa  IA North Central    3046355    21 0.6893484\n3 New Hampshire  NH     Northeast    1316470     5 0.3798036\n4  North Dakota  ND North Central     672591     4 0.5947151\n5       Vermont  VT     Northeast     625741     2 0.3196211",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#selecting-columns-with-select",
    "href": "Tidyverse.html#selecting-columns-with-select",
    "title": "4  Tidyverse",
    "section": "4.11 Selecting columns with select",
    "text": "4.11 Selecting columns with select\n\nnew_table &lt;- select(murders, state, region, rate)\nfilter(new_table, rate &lt;= 0.71)\n\n          state        region      rate\n1        Hawaii          West 0.5145920\n2          Iowa North Central 0.6893484\n3 New Hampshire     Northeast 0.3798036\n4  North Dakota North Central 0.5947151\n5       Vermont     Northeast 0.3196211",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#the-pipe",
    "href": "Tidyverse.html#the-pipe",
    "title": "4  Tidyverse",
    "section": "4.12 The pipe: %>%",
    "text": "4.12 The pipe: %&gt;%\n\\[ \\mbox{original data }\n\\rightarrow \\mbox{ select }\n\\rightarrow \\mbox{ filter } \\]",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#the-pipe-1",
    "href": "Tidyverse.html#the-pipe-1",
    "title": "4  Tidyverse",
    "section": "4.13 The pipe: %>%",
    "text": "4.13 The pipe: %&gt;%\nWhen using the pipe, functions take left hand side as first argumemt:\n\nmurders %&gt;% select(state, region, rate) %&gt;% filter(rate &lt;= 0.71)\n\n          state        region      rate\n1        Hawaii          West 0.5145920\n2          Iowa North Central 0.6893484\n3 New Hampshire     Northeast 0.3798036\n4  North Dakota North Central 0.5947151\n5       Vermont     Northeast 0.3196211",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#more-pipe-example",
    "href": "Tidyverse.html#more-pipe-example",
    "title": "4  Tidyverse",
    "section": "4.14 More pipe example",
    "text": "4.14 More pipe example\n\nsqrt(16)\n\n[1] 4\n\n16 %&gt;% sqrt()\n\n[1] 4\n\n\n\nlog2(sqrt(16))\n\n[1] 2\n\n16 %&gt;% sqrt() %&gt;% log2()\n\n[1] 2",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#example-use-arguments-with-pipe",
    "href": "Tidyverse.html#example-use-arguments-with-pipe",
    "title": "4  Tidyverse",
    "section": "4.15 Example: Use arguments with pipe",
    "text": "4.15 Example: Use arguments with pipe\n\n16 %&gt;% sqrt() %&gt;% log(base = 2)\n\n[1] 2",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#pipe-example",
    "href": "Tidyverse.html#pipe-example",
    "title": "4  Tidyverse",
    "section": "4.16 Pipe example",
    "text": "4.16 Pipe example\n\nmurders %&gt;% \n  select(state, region, rate) %&gt;% \n  filter(rate &lt;= 0.71)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#summarizing-data",
    "href": "Tidyverse.html#summarizing-data",
    "title": "4  Tidyverse",
    "section": "4.17 Summarizing data",
    "text": "4.17 Summarizing data\nSummarizing variables is very common operation.\nAverage female heights:\n\ndata(heights)\ns &lt;- heights %&gt;% \n  filter(sex == \"Female\") %&gt;%\n  summarize(average = mean(height))",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#tidyverse-always-returns-tables",
    "href": "Tidyverse.html#tidyverse-always-returns-tables",
    "title": "4  Tidyverse",
    "section": "4.18 Tidyverse always returns tables",
    "text": "4.18 Tidyverse always returns tables\n\ns$average\n\n[1] 64.93942",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#summarizing-data-1",
    "href": "Tidyverse.html#summarizing-data-1",
    "title": "4  Tidyverse",
    "section": "4.19 Summarizing data",
    "text": "4.19 Summarizing data\nYou can compute more than one summary\n\ndata(heights)\nheights %&gt;% \n  filter(sex == \"Female\") %&gt;%\n  summarize(median = median(height), \n            q25 = quantile(height, .25),\n            q75 = quantile(height, .75))\n\n    median q25 q75\n1 64.98031  63  67",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#summarize-only-wors-with-one-variable-summaries",
    "href": "Tidyverse.html#summarize-only-wors-with-one-variable-summaries",
    "title": "4  Tidyverse",
    "section": "4.20 Summarize only wors with one variable summaries",
    "text": "4.20 Summarize only wors with one variable summaries\nYou can compute more than one summary\n\ndata(heights)\nheights %&gt;% \n  filter(sex == \"Female\") %&gt;%\n  summarize(qs = quantile(height, c(1,2,3) / 4))\n\nError in summarise_impl(.data, dots) : \n  Column `qs` must be length 1 (a summary value), not 3",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#pull",
    "href": "Tidyverse.html#pull",
    "title": "4  Tidyverse",
    "section": "4.21 pull",
    "text": "4.21 pull\nThe us_murder_rate object defined above represents just one number. Yet we are storing it in a data frame:\n\ns &lt;- heights %&gt;% \n  filter(sex == \"Female\") %&gt;%\n  summarize(average = mean(height))\nclass(s)\n\n[1] \"data.frame\"",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#pull-1",
    "href": "Tidyverse.html#pull-1",
    "title": "4  Tidyverse",
    "section": "4.22 pull",
    "text": "4.22 pull\n\ns %&gt;% pull(average)\n\n[1] 64.93942",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#group-then-summarize",
    "href": "Tidyverse.html#group-then-summarize",
    "title": "4  Tidyverse",
    "section": "4.23 Group then summarize",
    "text": "4.23 Group then summarize\n\nheights %&gt;% group_by(sex)\n\n# A tibble: 1,050 × 2\n# Groups:   sex [2]\n   sex    height\n   &lt;fct&gt;   &lt;dbl&gt;\n 1 Male       75\n 2 Male       70\n 3 Male       68\n 4 Male       74\n 5 Male       61\n 6 Female     65\n 7 Female     66\n 8 Female     62\n 9 Female     66\n10 Male       67\n# ℹ 1,040 more rows\n\n\n\nThe result does not look very different from heights, except we see Groups: sex [2] when we print the object.\nAlthough not immediately obvious from its appearance, this is now a special data frame called a grouped data frame",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#group-then-summarize-1",
    "href": "Tidyverse.html#group-then-summarize-1",
    "title": "4  Tidyverse",
    "section": "4.24 Group then summarize",
    "text": "4.24 Group then summarize\n\nheights %&gt;% \n  group_by(sex) %&gt;%\n  summarize(average = mean(height), sd = sd(height))\n\n# A tibble: 2 × 3\n  sex    average    sd\n  &lt;fct&gt;    &lt;dbl&gt; &lt;dbl&gt;\n1 Female    64.9  3.76\n2 Male      69.3  3.61",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#the-dot-operator",
    "href": "Tidyverse.html#the-dot-operator",
    "title": "4  Tidyverse",
    "section": "4.25 The dot operator",
    "text": "4.25 The dot operator\n\nWhen using the pipe, the object being passed by the expression on the left side of the pipe can be accessed via .\nHere is an example that is equivalent to pull:\n\n\ns %&gt;% .$average\n\n[1] 64.93942",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#do",
    "href": "Tidyverse.html#do",
    "title": "4  Tidyverse",
    "section": "4.26 do",
    "text": "4.26 do\n\nWe saw that summarize does not permit the use of functions that return more than one scaler\nOne way to apply such function is with do\nThink of do as a connection between R base and the tidyverse.\nGeneral idea, write a function that returns what you want in a data frame, then call it with do.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#do-1",
    "href": "Tidyverse.html#do-1",
    "title": "4  Tidyverse",
    "section": "4.27 do",
    "text": "4.27 do\n\nqs &lt;- function(x){\n  res &lt;- quantile(x,  c(1,2,3) / 4)\n  data_frame(q25 = res[1], median = res[2],  q75 = res[3])\n}\nheights %&gt;% \n  group_by(sex) %&gt;%\n  do(qs(.$height))\n\nWarning: `data_frame()` was deprecated in tibble 1.1.0.\nℹ Please use `tibble()` instead.\n\n\n# A tibble: 2 × 4\n# Groups:   sex [2]\n  sex      q25 median   q75\n  &lt;fct&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 Female    63   65.0    67\n2 Male      67   69      72",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#sorting-data-frames",
    "href": "Tidyverse.html#sorting-data-frames",
    "title": "4  Tidyverse",
    "section": "4.28 Sorting data frames",
    "text": "4.28 Sorting data frames\n\nmurders %&gt;%\n  arrange(population) %&gt;%\n  head()\n\n                 state abb        region population total       rate\n1              Wyoming  WY          West     563626     5  0.8871131\n2 District of Columbia  DC         South     601723    99 16.4527532\n3              Vermont  VT     Northeast     625741     2  0.3196211\n4         North Dakota  ND North Central     672591     4  0.5947151\n5               Alaska  AK          West     710231    19  2.6751860\n6         South Dakota  SD North Central     814180     8  0.9825837",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#sorting-data-frames-1",
    "href": "Tidyverse.html#sorting-data-frames-1",
    "title": "4  Tidyverse",
    "section": "4.29 Sorting data frames",
    "text": "4.29 Sorting data frames\n\nmurders %&gt;% \n  arrange(rate) %&gt;% \n  head()\n\n          state abb        region population total      rate\n1       Vermont  VT     Northeast     625741     2 0.3196211\n2 New Hampshire  NH     Northeast    1316470     5 0.3798036\n3        Hawaii  HI          West    1360301     7 0.5145920\n4  North Dakota  ND North Central     672591     4 0.5947151\n5          Iowa  IA North Central    3046355    21 0.6893484\n6         Idaho  ID          West    1567582    12 0.7655102",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#sorting-data-frames-2",
    "href": "Tidyverse.html#sorting-data-frames-2",
    "title": "4  Tidyverse",
    "section": "4.30 Sorting data frames",
    "text": "4.30 Sorting data frames\n\nmurders %&gt;% \n  arrange(desc(rate)) %&gt;% \n  head()\n\n                 state abb        region population total      rate\n1 District of Columbia  DC         South     601723    99 16.452753\n2            Louisiana  LA         South    4533372   351  7.742581\n3             Missouri  MO North Central    5988927   321  5.359892\n4             Maryland  MD         South    5773552   293  5.074866\n5       South Carolina  SC         South    4625364   207  4.475323\n6             Delaware  DE         South     897934    38  4.231937",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#nested-sorting",
    "href": "Tidyverse.html#nested-sorting",
    "title": "4  Tidyverse",
    "section": "4.31 Nested sorting",
    "text": "4.31 Nested sorting\n\nmurders %&gt;% \n  arrange(region, rate) %&gt;% \n  head()\n\n          state abb    region population total      rate\n1       Vermont  VT Northeast     625741     2 0.3196211\n2 New Hampshire  NH Northeast    1316470     5 0.3798036\n3         Maine  ME Northeast    1328361    11 0.8280881\n4  Rhode Island  RI Northeast    1052567    16 1.5200933\n5 Massachusetts  MA Northeast    6547629   118 1.8021791\n6      New York  NY Northeast   19378102   517 2.6679599",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#the-top-n",
    "href": "Tidyverse.html#the-top-n",
    "title": "4  Tidyverse",
    "section": "4.32 The top \\(n\\)",
    "text": "4.32 The top \\(n\\)\n\nmurders %&gt;% top_n(10, rate)\n\n                  state abb        region population total      rate\n1               Arizona  AZ          West    6392017   232  3.629527\n2              Delaware  DE         South     897934    38  4.231937\n3  District of Columbia  DC         South     601723    99 16.452753\n4               Georgia  GA         South    9920000   376  3.790323\n5             Louisiana  LA         South    4533372   351  7.742581\n6              Maryland  MD         South    5773552   293  5.074866\n7              Michigan  MI North Central    9883640   413  4.178622\n8           Mississippi  MS         South    2967297   120  4.044085\n9              Missouri  MO North Central    5988927   321  5.359892\n10       South Carolina  SC         South    4625364   207  4.475323",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#tibbles",
    "href": "Tidyverse.html#tibbles",
    "title": "4  Tidyverse",
    "section": "4.33 Tibbles",
    "text": "4.33 Tibbles\n\ndata(murders)\nclass(murders)\n\n[1] \"data.frame\"\n\n\n\nRemember group_by permits stratifying data before computing summary statistics.\nBut where is the group information stored in the data frame?",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#tibbles-1",
    "href": "Tidyverse.html#tibbles-1",
    "title": "4  Tidyverse",
    "section": "4.34 Tibbles",
    "text": "4.34 Tibbles\n\nmurders %&gt;% group_by(region) %&gt;% head()\n\n# A tibble: 6 × 5\n# Groups:   region [2]\n  state      abb   region population total\n  &lt;chr&gt;      &lt;chr&gt; &lt;fct&gt;       &lt;dbl&gt; &lt;dbl&gt;\n1 Alabama    AL    South     4779736   135\n2 Alaska     AK    West       710231    19\n3 Arizona    AZ    West      6392017   232\n4 Arkansas   AR    South     2915918    93\n5 California CA    West     37253956  1257\n6 Colorado   CO    West      5029196    65",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#tibbles-2",
    "href": "Tidyverse.html#tibbles-2",
    "title": "4  Tidyverse",
    "section": "4.35 Tibbles",
    "text": "4.35 Tibbles\n\nmurders %&gt;% group_by(region) %&gt;% class()\n\n[1] \"grouped_df\" \"tbl_df\"     \"tbl\"        \"data.frame\"",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#tibles-versus-data-frames",
    "href": "Tidyverse.html#tibles-versus-data-frames",
    "title": "4  Tidyverse",
    "section": "4.36 Tibles versus data frames",
    "text": "4.36 Tibles versus data frames\n\nTibbles display better\nSubsets of tibbles are tibbles\n\n\nclass(murders[,4])\n\n[1] \"numeric\"\n\nclass(as_tibble(murders)[,4])\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#tibles-versus-data-frames-1",
    "href": "Tidyverse.html#tibles-versus-data-frames-1",
    "title": "4  Tidyverse",
    "section": "4.37 Tibles versus data frames",
    "text": "4.37 Tibles versus data frames\n\nmurders$Population\n\nNULL\n\nas_tibble(murders)$Population\n\nWarning: Unknown or uninitialised column: `Population`.\n\n\nNULL",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#tibles-versus-data-frames-2",
    "href": "Tidyverse.html#tibles-versus-data-frames-2",
    "title": "4  Tidyverse",
    "section": "4.38 Tibles versus data frames",
    "text": "4.38 Tibles versus data frames\n\nTibbles can have complex entries\n\n\ntibble(id = c(1, 2, 3), func = c(mean, median, sd))\n\n# A tibble: 3 × 2\n     id func  \n  &lt;dbl&gt; &lt;list&gt;\n1     1 &lt;fn&gt;  \n2     2 &lt;fn&gt;  \n3     3 &lt;fn&gt;",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#tibles-versus-data-frames-3",
    "href": "Tidyverse.html#tibles-versus-data-frames-3",
    "title": "4  Tidyverse",
    "section": "4.39 Tibles versus data frames",
    "text": "4.39 Tibles versus data frames\n\nTibbles can be grouped",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#create-a-tibble-using-data_frame",
    "href": "Tidyverse.html#create-a-tibble-using-data_frame",
    "title": "4  Tidyverse",
    "section": "4.40 Create a tibble using data_frame",
    "text": "4.40 Create a tibble using data_frame\n\ngrades &lt;- data_frame(names = c(\"John\", \"Juan\", \"Jean\", \"Yao\"), \n                     exam_1 = c(95, 80, 90, 85), \n                     exam_2 = c(90, 85, 85, 90))\ngrades\n\n# A tibble: 4 × 3\n  names exam_1 exam_2\n  &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1 John      95     90\n2 Juan      80     85\n3 Jean      90     85\n4 Yao       85     90",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#another-difference",
    "href": "Tidyverse.html#another-difference",
    "title": "4  Tidyverse",
    "section": "4.41 Another difference",
    "text": "4.41 Another difference\n\ngrades &lt;- data.frame(names = c(\"John\", \"Juan\", \"Jean\", \"Yao\"), \n                     exam_1 = c(95, 80, 90, 85), \n                     exam_2 = c(90, 85, 85, 90))\nclass(grades$names)\n\n[1] \"character\"",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#another-difference-1",
    "href": "Tidyverse.html#another-difference-1",
    "title": "4  Tidyverse",
    "section": "4.42 Another difference",
    "text": "4.42 Another difference\n\nTo avoid this, we use the rather cumbersome argument stringsAsFactors:\n\n\ngrades &lt;- data.frame(names = c(\"John\", \"Juan\", \"Jean\", \"Yao\"), \n                     exam_1 = c(95, 80, 90, 85), \n                     exam_2 = c(90, 85, 85, 90),\n                     stringsAsFactors = FALSE)\nclass(grades$names)\n\n[1] \"character\"",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#conver-to-tibble",
    "href": "Tidyverse.html#conver-to-tibble",
    "title": "4  Tidyverse",
    "section": "4.43 Conver to tibble",
    "text": "4.43 Conver to tibble\n\nas_tibble(grades) %&gt;% class()\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#conditionals",
    "href": "Tidyverse.html#conditionals",
    "title": "4  Tidyverse",
    "section": "4.44 Conditionals",
    "text": "4.44 Conditionals\n\nYou should be familiar with the ifelse function. But let’s review it as it is very useful in the tidyverse\nifelse vectorizes conditional assignments. Here is an example\n\n\nx &lt;- seq(-5, 5)\nifelse(x&gt;0, \"positive\", \"non-positive\")\n\n [1] \"non-positive\" \"non-positive\" \"non-positive\" \"non-positive\" \"non-positive\"\n [6] \"non-positive\" \"positive\"     \"positive\"     \"positive\"     \"positive\"    \n[11] \"positive\"",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#conditionals-1",
    "href": "Tidyverse.html#conditionals-1",
    "title": "4  Tidyverse",
    "section": "4.45 Conditionals",
    "text": "4.45 Conditionals\n\nThe tidyverse offers another useful tool: case_when\n\n\nx &lt;- seq(-5, 5)\ncase_when(x &gt; 0 ~ \"positive\",\n          x &lt; 0 ~ \"negative\",\n          TRUE ~ \"zero\")\n\n [1] \"negative\" \"negative\" \"negative\" \"negative\" \"negative\" \"zero\"    \n [7] \"positive\" \"positive\" \"positive\" \"positive\" \"positive\"",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Tidyverse.html#remapping",
    "href": "Tidyverse.html#remapping",
    "title": "4  Tidyverse",
    "section": "4.46 Remapping",
    "text": "4.46 Remapping\nThe recode function is a related useful function for dealing with factor names.\n\nx &lt;- seq(-5, 5)\nrecode(sign(x), \"1\" = \"positive\", \"0\" = \"zero\", \"-1\" = \"nonpositive\")\n\n [1] \"nonpositive\" \"nonpositive\" \"nonpositive\" \"nonpositive\" \"nonpositive\"\n [6] \"zero\"        \"positive\"    \"positive\"    \"positive\"    \"positive\"   \n[11] \"positive\"   \n\n\nMainly useful for changing codes to actual meaningful level names.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "Git_GitHub.html",
    "href": "Git_GitHub.html",
    "title": "5  Git and GitHub",
    "section": "",
    "text": "5.1 Introduction\nHere we provide some details on Git and GitHub. However, we are only scratching the surface. To learn more about this topic, we highly recommend the following resources:",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "Git_GitHub.html#introduction",
    "href": "Git_GitHub.html#introduction",
    "title": "5  Git and GitHub",
    "section": "",
    "text": "Codeacademy: https://www.codecademy.com/learn/learn-git\nGitHub Guides: https://guides.github.com/activities/hello-world/\nTry Git tutorial: https://try.github.io/levels/1/challenges/1\nHappy Git and GitHub for the useR: http://happygitwithr.com/",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "Git_GitHub.html#why-use-git-and-github",
    "href": "Git_GitHub.html#why-use-git-and-github",
    "title": "5  Git and GitHub",
    "section": "5.2 Why use Git and GitHub?",
    "text": "5.2 Why use Git and GitHub?\nThere are three main reasons to use Git and GitHub.\n\nSharing: Even if we do not take advantage of the advanced and powerful version control functionality, we can still use Git and GitHub to share our code.\nCollaborating: Once you set up a central repo, you can have multiple people make changes to code and keep versions synched. GitHub provides a free service for centralized repos. GitHub also has a special utility, called a pull request, that can be used by anybody to suggest changes to your code. You can easily either accept or deny the request.\nVersion control: The version control capabilities of Git permit us to keep track of changes we make to our code. We can also revert back to previous versions of files. Git also permits us to create branches in which we can test out ideas, then decide if we merge the new branch with the original.\n\nHere we focus on the sharing aspects of Git and GitHub and refer the reader to the links above to learn more about this powerful tool.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "Git_GitHub.html#github-accounts",
    "href": "Git_GitHub.html#github-accounts",
    "title": "5  Git and GitHub",
    "section": "5.3 GitHub accounts",
    "text": "5.3 GitHub accounts\nAfter installing git1, the first step is to get a GitHub account. Basic GitHub accounts are free. To do this, go to GitHub where you will see a box in which you can sign up.\nOnce you have a GitHub account, you are ready to connect Git and RStudio to this account.\nA first step is to let Git know who we are. This will make it easier to connect with GitHub. We start by opening a terminal window in RStudio (remember you can get one through Tools in the menu bar). Now we use the git config command to tell Git who we are. We will type the following two commands in our terminal window:\n\ngit config --global user.name \"Your Name\"\ngit config --global user.mail \"your@email.com\"",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "Git_GitHub.html#github-repos",
    "href": "Git_GitHub.html#github-repos",
    "title": "5  Git and GitHub",
    "section": "5.4 GitHub repositories",
    "text": "5.4 GitHub repositories\nYou are now ready to create a GitHub repository (repo). The general idea is that you will have at least two copies of your code: one on your computer and one on GitHub. If you add collaborators to this project, then each will have a copy on their computer. The GitHub copy is usually considered the master copy that each collaborator syncs to. Git will help you keep all the different copies synced.\nAs mentioned, one of the advantages of keeping code on a GitHub repository is that you can easily share it with potential employers interested in seeing examples of your work. Because many data science companies use version control systems, like Git, to collaborate on projects, they might also be impressed that you already know at least the basics.\nThe first step in creating a repo for your code is to initialize on GitHub. Because you already created an account, you will have a page on GitHub with the URL http://github.com/username.\nTo create a repo, first log in to your account by clicking the Sign In button on https://github.com. You might already be signed in, in which case the Sign In button will not show up.\nOnce on your account, you can click on Repositories and then click on New to create a new repo:\nYou will then want to choose a good descriptive name for the project. In the future, you might have dozens of repos so keep that in mind when choosing a name. Here we will use homework-0. We recommend you make the repo public. If you want to keep it private, you will have to pay a monthly charge.\nYou now have your first repo on GitHub. The next step will be to clone it on your computer and start editing and syncing using Git.\nTo do this, it is convenient to copy the link provided by GitHub specifically to connect to this repo, using Git as shown below. We will later need to copy and paste this so make sure to remember this step.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "Git_GitHub.html#git-overview",
    "href": "Git_GitHub.html#git-overview",
    "title": "5  Git and GitHub",
    "section": "5.5 Overview of Git",
    "text": "5.5 Overview of Git\nThe main actions in Git are to:\n\npull changes from the remote repo, in this case the GitHub repo\nadd files, or as we say in the Git lingo stage files\ncommit changes to the local repo\npush changes to the remote repo, in our case the GitHub repo\n\nTo effectively permit version control and collaboration in Git, files move across four different areas:\n\nBut how does it all get started? There are two ways: we can clone an existing repo or initialize one. We will explore cloning first.\n\n5.5.1 Clone\nWe are going to clone an existing Upstream Repository. You can see it on GitHub here: https://github.com/rairizarry/murders. By visiting this page, you can see multiple files and directories. This is the Upstream Repository. By clicking the green clone button, we can copy the repo’s URL https://github.com/rairizarry/murders.git.\nBut what does clone mean? Rather than download all these files to your computer, we are going to actually copy the entire Git structure, which means we will add the files and directories to each of the three local stages: Working Directory, Staging Area, and Local Repository. When you clone, all three are exactly the same to start.\nYou can quickly see an example of this by doing the following. Open a terminal and type:\n\npwd\nmkdir git-example\ncd git-example\ngit clone https://github.com/rairizarry/murders.git\ncd murders\n\n/Users/wcresko/Desktop/BioE_R_book\nmkdir: git-example: File exists\nfatal: destination path 'murders' already exists and is not an empty directory.\n\n\nYou now have cloned a GitHub repo and have a working Git directory, with all the files, on your system.\n\nls\n\n_book\n_quarto.yml\nBioE_Stat_Rscripts.Rproj\ncover.png\ndocs\nGit_GitHub_files\nGit_GitHub.html\nGit_GitHub.qmd\nGit_GitHub.rmarkdown\ngit-example\nimages\nindex.qmd\nintro.qmd\nnew-file.txt\nR_basics.qmd\nreferences.bib\nreferences.qmd\nsummary.qmd\nTidyverse.qmd\ntmp.txt\n\n\n\nThe Working Directory is the same as your Unix working directory. When you edit files using an editor such as RStudio, you change the files in this area and only in this area. Git can tell you how these files relate to the versions of the files in other areas with the command git status:\n\nIf you check the status now, you will see that nothing has changed and you get the following message:\n\ngit status\n\nOn branch main\nYour branch is ahead of 'origin/main' by 9 commits.\n  (use \"git push\" to publish your local commits)\n\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    modified:   _quarto.yml\n    modified:   docs/index.html\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    Git_GitHub.html\n    Git_GitHub.qmd\n    Git_GitHub.rmarkdown\n    Git_GitHub_files/\n    docs/Git_GitHub.html\n    git-example/\n    tmp.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n\nNow we are going to make changes to these files. Eventually, we want these new versions of the files to be tracked and synched with the upstream repo. But we don’t want to keep track of every little change: we don’t want to sync until we are sure these versions are final enough to share. For this reason, edits in the staging area are not kept by the version control system.\nTo demonstrate, we add a file to the staging area with the git add command. Below we create a file using the Unix echo command just as an example (in reality you would use RStudio):\n\necho \"test\" &gt;&gt; new-file.txt\n\nWe are also adding a temporary file that we do not want to track at all:\n\necho \"temporary\" &gt;&gt; tmp.txt\n\nNow we can stage the file we eventually want to add to our repository:\n\ngit add new-file.txt\n\nNotice what the status says now:\n\ngit status\n\nOn branch main\nYour branch is ahead of 'origin/main' by 9 commits.\n  (use \"git push\" to publish your local commits)\n\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n    modified:   new-file.txt\n\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    modified:   _quarto.yml\n    modified:   docs/index.html\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    Git_GitHub.html\n    Git_GitHub.qmd\n    Git_GitHub.rmarkdown\n    Git_GitHub_files/\n    docs/Git_GitHub.html\n    git-example/\n    tmp.txt\n\n\n\nBecause new-file.txt is staged, the current version of the file will get added to the local repository next time we commit, which we do as follows:\n\ngit commit -m \"adding a new file\" \n\n[main 3097f96] adding a new file\n 1 file changed, 1 insertion(+)\n\n\nWe have now changed the local repo, which you can confirm using\n\ngit status\n\n\nHowever, if we edit that file again, it changes only in the working directory. To add to the local repo, we need to stage it and commit the changes that are added to the local repo:\n\necho \"adding a line\" &gt;&gt; new-file.txt\ngit add new-file.txt\ngit commit -m \"adding a new line to new-file\"\n\n[main 0cca4b3] adding a new line to new-file\n 1 file changed, 1 insertion(+)\n\n\nNote that this step is often unnecessary in our uses of Git. We can skip the staging part if we add the file name to the commit command like this:\n\necho \"adding a second line\" &gt;&gt; new-file.txt\ngit commit -m \"minor change to new-file\" new-file.txt\n\n[main e147469] minor change to new-file\n 1 file changed, 1 insertion(+)\n\n\nWe can keep track of all the changes we have made with:\n\ngit log new-file.txt\n\ncommit e1474696a0e3a50f687ce04e78401f6bd9e2ea31\nAuthor: wcresko &lt;wcresko@uoregon.edu&gt;\nDate:   Mon Apr 21 10:39:36 2025 -0700\n\n    minor change to new-file\n\ncommit 0cca4b3c95f82eaece94176d62b9cb93b0902c1c\nAuthor: wcresko &lt;wcresko@uoregon.edu&gt;\nDate:   Mon Apr 21 10:39:36 2025 -0700\n\n    adding a new line to new-file\n\ncommit 3097f96acbf4e93997275c73acb0e230d5328d20\nAuthor: wcresko &lt;wcresko@uoregon.edu&gt;\nDate:   Mon Apr 21 10:39:36 2025 -0700\n\n    adding a new file\n\ncommit dede17a4cd172f0d755497d7bbd7c570b9b45852\nAuthor: wcresko &lt;wcresko@uoregon.edu&gt;\nDate:   Mon Apr 21 10:36:40 2025 -0700\n\n    minor change to new-file\n\ncommit 07c800c4c7091842f8099f430d9b7f3b283d8640\nAuthor: wcresko &lt;wcresko@uoregon.edu&gt;\nDate:   Mon Apr 21 10:36:40 2025 -0700\n\n    adding a new line to new-file\n\ncommit 07ae6be63a7f5f5055ae5dd5848210a757c044f2\nAuthor: wcresko &lt;wcresko@uoregon.edu&gt;\nDate:   Mon Apr 21 10:36:40 2025 -0700\n\n    adding a new file\n\ncommit 10c4ba7c0f45cf55b1ab16a64aa4e2aee2130d4f\nAuthor: wcresko &lt;wcresko@uoregon.edu&gt;\nDate:   Mon Apr 21 10:34:45 2025 -0700\n\n    minor change to new-file\n\ncommit b189a01863d757e7aec2f8e9d4933d68e1618084\nAuthor: wcresko &lt;wcresko@uoregon.edu&gt;\nDate:   Mon Apr 21 10:34:45 2025 -0700\n\n    adding a new line to new-file\n\ncommit 1b9acc3dd809cb98de26c8fc1cbab8466073c4d8\nAuthor: wcresko &lt;wcresko@uoregon.edu&gt;\nDate:   Mon Apr 21 10:34:45 2025 -0700\n\n    adding a new file\n\ncommit 07d82026672391cf032c3d92536179eda9573302\nAuthor: wcresko &lt;wcresko@uoregon.edu&gt;\nDate:   Mon Apr 21 10:33:08 2025 -0700\n\n    minor change to new-file\n\ncommit 086049bef667d122333856f6d928ee5f74c4d810\nAuthor: wcresko &lt;wcresko@uoregon.edu&gt;\nDate:   Mon Apr 21 10:33:08 2025 -0700\n\n    adding a new line to new-file\n\ncommit 74f2cdb3c73b697106cf1b6b3727bda0c88acd76\nAuthor: wcresko &lt;wcresko@uoregon.edu&gt;\nDate:   Mon Apr 21 10:33:08 2025 -0700\n\n    adding a new file\n\n\nTo keep everything synced, the final step is to push the changes to the upstream repo. This is done with the git push command like this:\n\ngit push\n\n\nHowever, in this particular example, you will not be able to do this because you do not have permission to edit the upstream repo. If this was your repo, you could.\nIf this is a collaborative project, the upstream repo may change and become different than our version. To update our local repository to be like the upstream repo, we use the command fetch:\n\ngit fetch\n\n\nAnd then to make these copies to the staging and working directory areas, we use the command:\n\ngit merge\n\n\nHowever, we often just want to change both with one command. For this, we use:\n\ngit pull\n\n\nWe will learn in Section @ref(rstudio-git) how RStudio has buttons to do all this. The details provided here should help you understand what happens in the background.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "Git_GitHub.html#init",
    "href": "Git_GitHub.html#init",
    "title": "5  Git and GitHub",
    "section": "5.6 Initializing a Git directory",
    "text": "5.6 Initializing a Git directory\nNow let’s learn the second way we can get started: by initializing a directory on our own computer rather than cloning.\nSuppose we already have a populated local directory and we want to turn this directory into a collaborative GitHub repository. The most efficient way of achieving this is by initializing the local directory.\nTo demonstrate how to do this we will initialize the gun murders directory we created in Section @ref(prep-project). Note that we already created a directory with several subdirectories on our computer but we do not yet have a Git local repo or GitHub upstream repo.\nWe start by creating a new repo on our GitHub page. We click on the New button:\nAt this moment, we can start a terminal and cd into our local projects directory. In our example, it would be:\n\ncd ~/projects/murders\n\nWe then intialize the directory. This turns the directory into a Git directory and Git starts tracking:\n\ngit init\n\nAll the files are now only in our working directory; no files are in our local repo or on GitHub.\nThe next step is to connect the local repo with the GitHub repo. In a previous example, we had RStudio do this for us. Now we need to do it ourselves. We can by adding any of the files and committing it:\n\ngit add README.txt\ngit commit -m \"First commit. Adding README.txt file just to get started\"\n\nWe now have a file in our local repo and can connect it to the upstream repo, which has url: https://github.com/rairizarry/murders.git.\nTo do this, we use the command git remote add.\n\ngit remote add origin `https://github.com/rairizarry/murders.git`\n\nWe can now use git push since there is a connection to an upstream repo:\n\ngit push\n\nIn Section @ref(organizing) we continue to work with this example, as we demonstrate how we can use RStudio to work with Git and keep a project synced on GitHub.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "Git_GitHub.html#rstudio-git",
    "href": "Git_GitHub.html#rstudio-git",
    "title": "5  Git and GitHub",
    "section": "5.7 Using Git and GitHub in RStudio",
    "text": "5.7 Using Git and GitHub in RStudio\nWhile command line Git is a powerful and flexible tool, it can be somewhat daunting when we are getting started. RStudio provides a graphical interface that facilitates the use of Git in the context of a data analysis project. We describe how to use this RStudio feature to do this here.\nNow we are ready to start an RStudio project that uses version control and stores the code on a GitHub repo. To do this, we start a project but, instead of New Directory, we will select Version Control and then we will select Git as our version control system:\nThe repository URL is the link you used to clone. In Section @ref(github-repos), we used https://github.com/username/homework-0.git as an example. In the project directory name, you need to put the name of the folder that was generated, which in our example will be the name of the repo homework-0. This will create a folder called homework-0 on your local system. Once you do this, the project is created and it is aware of the connection to a GitHub repo. You will see on the top right corner the name and type of project as well as a new tab on the upper right pane titled Git.\n! If you select this tab, it will show you the files on your project with some icons that give you information about these files and their relationship to the repo. In the example below, we already added a file to the folder, called code.R which you can see in the editing pane.\nWe now need to pay attention to the Git pane. It is important to know that your local files and the GitHub repo will not be synced automatically. As described in Section @ref(git-overview), you have to sync using git push when you are ready. We show you can do this through RStudio rather than the terminal below.\nBefore we start working on a collaborative project, usually the first thing we do is pull in the changes from the remote repo, in our case the one on GitHub. However, for the example shown here, since we are starting with an empty repo and we are the only ones making changes, we don’t need to start by pulling.\nIn RStudio, the status of the file as it relates to the remote and local repos are represented in the status symbols with colors. A yellow square means that Git knows nothing about this file. To sync with the GitHub repo, we need to add the file, then commit the change to our local Git repo, then push the change to the GitHub repo. Right now, the file is just on our computer. To add the file using RStudio, we click the Stage box. You will see that the status icon now changes to a green A.\nNote: we are only adding the code.R file. We don’t necessarily need to add all the files in our local repo to the GitHub repo, only the ones we want to keep track of or the ones we want to share. If our work is producing files of a certain type that we do not want to keep track of, we can add the suffix that defines these files to the .gitignore file. More details on using .gitignore are included here: https://git-scm.com/docs/gitignore. These files will stop appearing in your RStudio Git pane. For the example shown here, we will only be adding code.R. But, in general, for an RStudio project, we recommend adding both the .gitignore and .Rproj files.\nNow we are ready to commit the file to our local repo. In RStudio, we can use the Commit button. This will open a new dialog window. With Git, whenever we commit a change, we are required to enter a comment describing the changes being committed.\nIn this case, we will simply describe that we are adding a new script. In this dialog box, RStudio also gives you a summary of what you are changing to the GitHub repo. In this case, because it is a new file, the entire file is highlighted as green, which highlights the changes.\nOnce we hit the commit button, we should see a message from Git with a summary of the changes that were committed. Now we are ready to push these changes to the GitHub repo. We can do this by clicking on the Push button on the top right corner:\nWe now see a message from Git letting us know that the push has succeeded. In the pop-up window we no longer see the code.R file. This is because no new changes have been performed since we last pushed. We can exit this pop-up window now and continue working on our code.\nIf we now visit our repo on the web, we will see that it matches our local copy.\nCongratulations, you have successfully shared code on a GitHub repository!\nhttps://learngitbranching.js.org/",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "Git_GitHub.html#clone-the-repository",
    "href": "Git_GitHub.html#clone-the-repository",
    "title": "5  Git and GitHub",
    "section": "5.8 Clone the repository",
    "text": "5.8 Clone the repository\n\nFirst make a new directory into which you will clone our course repository\n\nThis will prevent you from overwriting any of the documents you have have edited\nAnd it’s good practice to do it again\n\nYou should work through the terminal application and use Unix to do this\nOpen the terminal and navigate to your new directory and type the following:\n\n\ngit clone https://github.com/wcresko/evomics_stat_2019.git",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "Git_GitHub.html#update-the-repository",
    "href": "Git_GitHub.html#update-the-repository",
    "title": "5  Git and GitHub",
    "section": "5.9 Update the repository",
    "text": "5.9 Update the repository\n\nNow to update the repository you just need to use these commands\n\n\ngit status\ngit fetch\ngit status\ngit merge origin/master\n\n\nThe first command just tells you if anything has changed\n\nIf so, do the second!\nThis is much safer than git pull",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "Git_GitHub.html#footnotes",
    "href": "Git_GitHub.html#footnotes",
    "title": "5  Git and GitHub",
    "section": "",
    "text": "https://rafalab.github.io/dsbook/accessing-the-terminal-and-installing-git.html↩︎",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "R_basics.html#case-study-us-gun-murders",
    "href": "R_basics.html#case-study-us-gun-murders",
    "title": "2  R basics",
    "section": "6.1 Case study: US Gun Murders",
    "text": "6.1 Case study: US Gun Murders\nImagine you live in Europe and are offered a job in a US company with many locations across all states. It is a great job, but news with headlines such as US Gun Homicide Rate Higher Than Other Developed Countries3 have you worried. Charts like this may concern you even more:\nOr even worse, this version from everytown.org:\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\n\n\n\n\n\n\nBut then you remember that the US is a large and diverse country with 50 very different states as well as the District of Columbia (DC).\n\n\nWarning: The `guide` argument in `scale_*()` cannot be `FALSE`. This was deprecated in\nggplot2 3.3.4.\nℹ Please use \"none\" instead.\n\n\n\n\n\n\n\n\n\nCalifornia, for example, has a larger population than Canada, and 20 US states have populations larger than that of Norway. In some respects, the variability across states in the US is akin to the variability across countries in Europe. Furthermore, although not included in the charts above, the murder rates in Lithuania, Ukraine, and Russia are higher than 4 per 100,000. So perhaps the news reports that worried you are too superficial. You have options of where to live and want to determine the safety of each particular state. We will gain some insights by examining data related to gun homicides in the US during 2010 using R.\nBefore we get started with our example, we need to cover logistics as well as some of the very basic building blocks that are required to gain more advanced R skills. Be aware that the usefulness of some of these building blocks may not be immediately obvious, but later in the book you will appreciate having mastered these skills.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#the-very-basics",
    "href": "R_basics.html#the-very-basics",
    "title": "2  R basics",
    "section": "6.2 The very basics",
    "text": "6.2 The very basics\nBefore we get started with the motivating dataset, we need to cover the very basics of R.\n\n6.2.1 Objects\nSuppose a high school student asks us for help solving several quadratic equations of the form \\(ax^2+bx+c = 0\\). The quadratic formula gives us the solutions:\n\\[\n\\frac{-b - \\sqrt{b^2 - 4ac}}{2a}\\,\\, \\mbox{ and } \\frac{-b + \\sqrt{b^2 - 4ac}}{2a}\n\\] which of course change depending on the values of \\(a\\), \\(b\\), and \\(c\\). One advantage of programming languages is that we can define variables and write expressions with these variables, similar to how we do so in math, but obtain a numeric solution. We will write out general code for the quadratic equation below, but if we are asked to solve \\(x^2 + x -1 = 0\\), then we define:\n\na &lt;- 1\nb &lt;- 1\nc &lt;- -1\n\nwhich stores the values for later use. We use &lt;- to assign values to the variables.\nWe can also assign values using = instead of &lt;-, but we recommend against using = to avoid confusion.\nCopy and paste the code above into your console to define the three variables. Note that R does not print anything when we make this assignment. This means the objects were defined successfully. Had you made a mistake, you would have received an error message.\nTo see the value stored in a variable, we simply ask R to evaluate a and it shows the stored value:\n\na\n\n[1] 1\n\n\nA more explicit way to ask R to show us the value stored in a is using print like this:\n\nprint(a)\n\n[1] 1\n\n\nWe use the term object to describe stuff that is stored in R. Variables are examples, but objects can also be more complicated entities such as functions, which are described later.\n\n\n6.2.2 The workspace\nAs we define objects in the console, we are actually changing the workspace. You can see all the variables saved in your workspace by typing:\n\nls()\n\n [1] \"a\"              \"b\"              \"c\"              \"dat\"           \n [5] \"murders\"        \"n\"              \"seq_1\"          \"seq_2\"         \n [9] \"seq_square\"     \"seq_square_new\" \"x\"              \"x_factor\"      \n[13] \"xy\"             \"y\"              \"y_log\"          \"z\"             \n\n\nIn RStudio, the Environment tab shows the values:\n\nWe should see a, b, and c. If you try to recover the value of a variable that is not in your workspace, you receive an error. For example, if you type x you will receive the following message: Error: object 'x' not found.\nNow since these values are saved in variables, to obtain a solution to our equation, we use the quadratic formula:\n\n(-b + sqrt(b^2 - 4*a*c) ) / ( 2*a )\n\n[1] 0.618034\n\n(-b - sqrt(b^2 - 4*a*c) ) / ( 2*a )\n\n[1] -1.618034\n\n\n\n\n6.2.3 Functions\nOnce you define variables, the data analysis process can usually be described as a series of functions applied to the data. R includes several predefined functions and most of the analysis pipelines we construct make extensive use of these.\nWe already used the install.packages, library, and ls functions. We also used the function sqrt to solve the quadratic equation above. There are many more prebuilt functions and even more can be added through packages. These functions do not appear in the workspace because you did not define them, but they are available for immediate use.\nIn general, we need to use parentheses to evaluate a function. If you type ls, the function is not evaluated and instead R shows you the code that defines the function. If you type ls() the function is evaluated and, as seen above, we see objects in the workspace.\nUnlike ls, most functions require one or more arguments. Below is an example of how we assign an object to the argument of the function log. Remember that we earlier defined a to be 1:\n\nlog(8)\n\n[1] 2.079442\n\nlog(a) \n\n[1] 0\n\n\nYou can find out what the function expects and what it does by reviewing the very useful manuals included in R. You can get help by using the help function like this:\n\nhelp(\"log\")\n\nFor most functions, we can also use this shorthand:\n\n?log\n\nThe help page will show you what arguments the function is expecting. For example, log needs x and base to run. However, some arguments are required and others are optional. You can determine which arguments are optional by noting in the help document that a default value is assigned with =. Defining these is optional. For example, the base of the function log defaults to base = exp(1) making log the natural log by default.\nIf you want a quick look at the arguments without opening the help system, you can type:\n\nargs(log)\n\nfunction (x, base = exp(1)) \nNULL\n\n\nYou can change the default values by simply assigning another object:\n\nlog(8, base = 2)\n\n[1] 3\n\n\nNote that we have not been specifying the argument x as such:\n\nlog(x = 8, base = 2)\n\n[1] 3\n\n\nThe above code works, but we can save ourselves some typing: if no argument name is used, R assumes you are entering arguments in the order shown in the help file or by args. So by not using the names, it assumes the arguments are x followed by base:\n\nlog(8,2)\n\n[1] 3\n\n\nIf using the arguments’ names, then we can include them in whatever order we want:\n\nlog(base = 2, x = 8)\n\n[1] 3\n\n\nTo specify arguments, we must use =, and cannot use &lt;-.\nThere are some exceptions to the rule that functions need the parentheses to be evaluated. Among these, the most commonly used are the arithmetic and relational operators. For example:\n\n2 ^ 3\n\n[1] 8\n\n\nYou can see the arithmetic operators by typing:\n\nhelp(\"+\") \n\nor\n\n?\"+\"\n\nand the relational operators by typing:\n\nhelp(\"&gt;\") \n\nor\n\n?\"&gt;\"\n\n\n\n6.2.4 Other prebuilt objects\nThere are several datasets that are included for users to practice and test out functions. You can see all the available datasets by typing:\n\ndata()\n\nThis shows you the object name for these datasets. These datasets are objects that can be used by simply typing the name. For example, if you type:\n\nco2\n\nR will show you Mauna Loa atmospheric CO2 concentration data.\nOther prebuilt objects are mathematical quantities, such as the constant \\(\\pi\\) and \\(\\infty\\):\n\npi\n\n[1] 3.141593\n\nInf+1\n\n[1] Inf\n\n\n\n\n6.2.5 Variable names\nWe have used the letters a, b, and c as variable names, but variable names can be almost anything. Some basic rules in R are that variable names have to start with a letter, can’t contain spaces, and should not be variables that are predefined in R. For example, don’t name one of your variables install.packages by typing something like install.packages &lt;- 2.\nA nice convention to follow is to use meaningful words that describe what is stored, use only lower case, and use underscores as a substitute for spaces. For the quadratic equations, we could use something like this:\n\nsolution_1 &lt;- (-b + sqrt(b^2 - 4*a*c)) / (2*a)\nsolution_2 &lt;- (-b - sqrt(b^2 - 4*a*c)) / (2*a)\n\nFor more advice, we highly recommend studying Hadley Wickham’s style guide4.\n\n\n6.2.6 Saving your workspace\nValues remain in the workspace until you end your session or erase them with the function rm. But workspaces also can be saved for later use. In fact, when you quit R, the program asks you if you want to save your workspace. If you do save it, the next time you start R, the program will restore the workspace.\nWe actually recommend against saving the workspace this way because, as you start working on different projects, it will become harder to keep track of what is saved. Instead, we recommend you assign the workspace a specific name. You can do this by using the function save or save.image. To load, use the function load. When saving a workspace, we recommend the suffix rda or RData. In RStudio, you can also do this by navigating to the Session tab and choosing Save Workspace as. You can later load it using the Load Workspace options in the same tab. You can read the help pages on save, save.image, and load to learn more.\n\n\n6.2.7 Motivating scripts\nTo solve another equation such as \\(3x^2 + 2x -1\\), we can copy and paste the code above and then redefine the variables and recompute the solution:\n\na &lt;- 3\nb &lt;- 2\nc &lt;- -1\n(-b + sqrt(b^2 - 4*a*c)) / (2*a)\n(-b - sqrt(b^2 - 4*a*c)) / (2*a)\n\nBy creating and saving a script with the code above, we would not need to retype everything each time and, instead, simply change the variable names. Try writing the script above into an editor and notice how easy it is to change the variables and receive an answer.\n\n\n6.2.8 Commenting your code\nIf a line of R code starts with the symbol #, it is not evaluated. We can use this to write reminders of why we wrote particular code. For example, in the script above we could add:\n\n## Code to compute solution to quadratic equation of the form ax^2 + bx + c\n## define the variables\na &lt;- 3 \nb &lt;- 2\nc &lt;- -1\n\n## now compute the solution\n(-b + sqrt(b^2 - 4*a*c)) / (2*a)\n(-b - sqrt(b^2 - 4*a*c)) / (2*a)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#exercises",
    "href": "R_basics.html#exercises",
    "title": "2  R basics",
    "section": "6.3 Exercises",
    "text": "6.3 Exercises\n1. What is the sum of the first 100 positive integers? The formula for the sum of integers \\(1\\) through \\(n\\) is \\(n(n+1)/2\\). Define \\(n=100\\) and then use R to compute the sum of \\(1\\) through \\(100\\) using the formula. What is the sum?\n2. Now use the same formula to compute the sum of the integers from 1 through 1,000.\n3. Look at the result of typing the following code into R:\n\nn &lt;- 1000\nx &lt;- seq(1, n)\nsum(x)\n\nBased on the result, what do you think the functions seq and sum do? You can use help.\n\nsum creates a list of numbers and seq adds them up.\nseq creates a list of numbers and sum adds them up.\nseq creates a random list and sum computes the sum of 1 through 1,000.\nsum always returns the same number.\n\n4. In math and programming, we say that we evaluate a function when we replace the argument with a given number. So if we type sqrt(4), we evaluate the sqrt function. In R, you can evaluate a function inside another function. The evaluations happen from the inside out. Use one line of code to compute the log, in base 10, of the square root of 100.\n5. Which of the following will always return the numeric value stored in x? You can try out examples and use the help system if you want.\n\nlog(10^x)\nlog10(x^10)\nlog(exp(x))\nexp(log(x, base = 2))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#data-types",
    "href": "R_basics.html#data-types",
    "title": "2  R basics",
    "section": "6.4 Data types",
    "text": "6.4 Data types\nVariables in R can be of different types. For example, we need to distinguish numbers from character strings and tables from simple lists of numbers. The function class helps us determine what type of object we have:\n\na &lt;- 2\nclass(a)\n\n[1] \"numeric\"\n\n\nTo work efficiently in R, it is important to learn the different types of variables and what we can do with these.\n\n6.4.1 Data frames\nUp to now, the variables we have defined are just one number. This is not very useful for storing data. The most common way of storing a dataset in R is in a data frame. Conceptually, we can think of a data frame as a table with rows representing observations and the different variables reported for each observation defining the columns. Data frames are particularly useful for datasets because we can combine different data types into one object.\nA large proportion of data analysis challenges start with data stored in a data frame. For example, we stored the data for our motivating example in a data frame. You can access this dataset by loading the dslabs library and loading the murders dataset using the data function:\n\nlibrary(dslabs)\ndata(murders)\n\nTo see that this is in fact a data frame, we type:\n\nclass(murders)\n\n[1] \"data.frame\"\n\n\n\n\n6.4.2 Examining an object\nThe function str is useful for finding out more about the structure of an object:\n\nstr(murders)\n\n'data.frame':   51 obs. of  5 variables:\n$ state : chr \"Alabama\" \"Alaska\" \"Arizona\" \"Arkansas\" ...\n$ abb : chr \"AL\" \"AK\" \"AZ\" \"AR\" ...\n$ region : Factor w/ 4 levels \"Northeast\",\"South\",..: 2 4 4 2 4 4 1 2 2 2 ...\n$ population: num 4779736 710231 6392017 2915918 37253956 ...\n$ total : num 135 19 232 93 1257 ...\n\n\nThis tells us much more about the object. We see that the table has 51 rows (50 states plus DC) and five variables. We can show the first six lines using the function head:\n\nhead(murders)\n\n       state abb region population total\n1    Alabama  AL  South    4779736   135\n2     Alaska  AK   West     710231    19\n3    Arizona  AZ   West    6392017   232\n4   Arkansas  AR  South    2915918    93\n5 California  CA   West   37253956  1257\n6   Colorado  CO   West    5029196    65\n\n\nIn this dataset, each state is considered an observation and five variables are reported for each state.\nBefore we go any further in answering our original question about different states, let’s learn more about the components of this object.\n\n\n6.4.3 The accessor: $\nFor our analysis, we will need to access the different variables represented by columns included in this data frame. To do this, we use the accessor operator $ in the following way:\n\nmurders$population\n\n [1]  4779736   710231  6392017  2915918 37253956  5029196  3574097   897934\n [9]   601723 19687653  9920000  1360301  1567582 12830632  6483802  3046355\n[17]  2853118  4339367  4533372  1328361  5773552  6547629  9883640  5303925\n[25]  2967297  5988927   989415  1826341  2700551  1316470  8791894  2059179\n[33] 19378102  9535483   672591 11536504  3751351  3831074 12702379  1052567\n[41]  4625364   814180  6346105 25145561  2763885   625741  8001024  6724540\n[49]  1852994  5686986   563626\n\n\nBut how did we know to use population? Previously, by applying the function str to the object murders, we revealed the names for each of the five variables stored in this table. We can quickly access the variable names using:\n\nnames(murders)\n\n[1] \"state\"      \"abb\"        \"region\"     \"population\" \"total\"     \n\n\nIt is important to know that the order of the entries in murders$population preserves the order of the rows in our data table. This will later permit us to manipulate one variable based on the results of another. For example, we will be able to order the state names by the number of murders.\nTip: R comes with a very nice auto-complete functionality that saves us the trouble of typing out all the names. Try typing murders$p then hitting the tab key on your keyboard. This functionality and many other useful auto-complete features are available when working in RStudio.\n\n\n6.4.4 Vectors: numerics, characters, and logical\nThe object murders$population is not one number but several. We call these types of objects vectors. A single number is technically a vector of length 1, but in general we use the term vectors to refer to objects with several entries. The function length tells you how many entries are in the vector:\n\npop &lt;- murders$population\nlength(pop)\n\n[1] 51\n\n\nThis particular vector is numeric since population sizes are numbers:\n\nclass(pop)\n\n[1] \"numeric\"\n\n\nIn a numeric vector, every entry must be a number.\nTo store character strings, vectors can also be of class character. For example, the state names are characters:\n\nclass(murders$state)\n\n[1] \"character\"\n\n\nAs with numeric vectors, all entries in a character vector need to be a character.\nAnother important type of vectors are logical vectors. These must be either TRUE or FALSE.\n\nz &lt;- 3 == 2\nz\n\n[1] FALSE\n\nclass(z)\n\n[1] \"logical\"\n\n\nHere the == is a relational operator asking if 3 is equal to 2. In R, if you just use one =, you actually assign a variable, but if you use two == you test for equality.\nYou can see the other relational operators by typing:\n\n?Comparison\n\nIn future sections, you will see how useful relational operators can be.\nWe discuss more important features of vectors after the next set of exercises.\nAdvanced: Mathematically, the values in pop are integers and there is an integer class in R. However, by default, numbers are assigned class numeric even when they are round integers. For example, class(1) returns numeric. You can turn them into class integer with the as.integer() function or by adding an L like this: 1L. Note the class by typing: class(1L)\n\n\n6.4.5 Factors\nIn the murders dataset, we might expect the region to also be a character vector. However, it is not:\n\nclass(murders$region)\n\n[1] \"factor\"\n\n\nIt is a factor. Factors are useful for storing categorical data. We can see that there are only 4 regions by using the levels function:\n\nlevels(murders$region)\n\n[1] \"Northeast\"     \"South\"         \"North Central\" \"West\"         \n\n\nIn the background, R stores these levels as integers and keeps a map to keep track of the labels. This is more memory efficient than storing all the characters.\nNote that the levels have an order that is different from the order of appearance in the factor object. The default is for the levels to follow alphabetical order. However, often we want the levels to follow a different order. We will see several examples of this in the Data Visualization part of the book. The function reorder lets us change the order of the levels of a factor variable based on a summary computed on a numeric vector. We will demonstrate this with a simple example.\nSuppose we want the levels of the region by the total number of murders rather than alphabetical order. If there are values associated with each level, we can use the reorder and specify a data summary to determine the order. The following code takes the sum of the total murders in each region, and reorders the factor following these sums.\n\nregion &lt;- murders$region\nvalue &lt;- murders$total\nregion &lt;- reorder(region, value, FUN = sum)\nlevels(region)\n\n[1] \"Northeast\"     \"North Central\" \"West\"          \"South\"        \n\n\nThe new order is in agreement with the fact that the Northeast has the least murders and the South has the most.\nWarning: Factors can be a source of confusion since sometimes they behave like characters and sometimes they do not. As a result, confusing factors and characters are a common source of bugs.\n\n\n6.4.6 Lists\nData frames are a special case of lists. We will cover lists in more detail later, but know that they are useful because you can store any combination of different types. Below is an example of a list we created for you:\n\nrecord\n\n$name\n[1] \"John Doe\"\n\n$student_id\n[1] 1234\n\n$grades\n[1] 95 82 91 97 93\n\n$final_grade\n[1] \"A\"\n\nclass(record)\n\n[1] \"list\"\n\n\nAs with data frames, you can extract the components of a list with the accessor $. In fact, data frames are a type of list.\n\nrecord$student_id\n\n[1] 1234\n\n\nWe can also use double square brackets ([[) like this:\n\nrecord[[\"student_id\"]]\n\n[1] 1234\n\n\nYou should get used to the fact that in R, there are often several ways to do the same thing, such as accessing entries.\nYou might also encounter lists without variable names.\n\nrecord2\n\n[[1]]\n[1] \"John Doe\"\n\n[[2]]\n[1] 1234\n\n\nIf a list does not have names, you cannot extract the elements with $, but you can still use the brackets method and instead of providing the variable name, you provide the list index, like this:\n\nrecord2[[1]]\n\n[1] \"John Doe\"\n\n\nWe won’t be using lists until later, but you might encounter one in your own exploration of R. For this reason, we show you some basics here.\n\n\n6.4.7 Matrices\nMatrices are another type of object that are common in R. Matrices are similar to data frames in that they are two-dimensional: they have rows and columns. However, like numeric, character and logical vectors, entries in matrices have to be all the same type. For this reason data frames are much more useful for storing data, since we can have characters, factors, and numbers in them.\nYet matrices have a major advantage over data frames: we can perform matrix algebra operations, a powerful type of mathematical technique. We do not describe these operations in this book, but much of what happens in the background when you perform a data analysis involves matrices. We cover matrices in more detail in Chapter @ref(matrix-algebra) but describe them briefly here since some of the functions we will learn return matrices.\nWe can define a matrix using the matrix function. We need to specify the number of rows and columns.\n\nmat &lt;- matrix(1:12, 4, 3)\nmat\n\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n\n\nYou can access specific entries in a matrix using square brackets ([). If you want the second row, third column, you use:\n\nmat[2, 3]\n\n[1] 10\n\n\nIf you want the entire second row, you leave the column spot empty:\n\nmat[2, ]\n\n[1]  2  6 10\n\n\nNotice that this returns a vector, not a matrix.\nSimilarly, if you want the entire third column, you leave the row spot empty:\n\nmat[, 3]\n\n[1]  9 10 11 12\n\n\nThis is also a vector, not a matrix.\nYou can access more than one column or more than one row if you like. This will give you a new matrix.\n\nmat[, 2:3]\n\n     [,1] [,2]\n[1,]    5    9\n[2,]    6   10\n[3,]    7   11\n[4,]    8   12\n\n\nYou can subset both rows and columns:\n\nmat[1:2, 2:3]\n\n     [,1] [,2]\n[1,]    5    9\n[2,]    6   10\n\n\nWe can convert matrices into data frames using the function as.data.frame:\n\nas.data.frame(mat)\n\n  V1 V2 V3\n1  1  5  9\n2  2  6 10\n3  3  7 11\n4  4  8 12\n\n\nYou can also use single square brackets ([) to access rows and columns of a data frame:\n\ndata(\"murders\")\nmurders[25, 1]\n\n[1] \"Mississippi\"\n\nmurders[2:3, ]\n\n    state abb region population total\n2  Alaska  AK   West     710231    19\n3 Arizona  AZ   West    6392017   232",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#exercises-1",
    "href": "R_basics.html#exercises-1",
    "title": "2  R basics",
    "section": "6.5 Exercises",
    "text": "6.5 Exercises\n1. Load the US murders dataset.\n\nlibrary(dslabs)\ndata(murders)\n\nUse the function str to examine the structure of the murders object. Which of the following best describes the variables represented in this data frame?\n\nThe 51 states.\nThe murder rates for all 50 states and DC.\nThe state name, the abbreviation of the state name, the state’s region, and the state’s population and total number of murders for 2010.\nstr shows no relevant information.\n\n2. What are the column names used by the data frame for these five variables?\n3. Use the accessor $ to extract the state abbreviations and assign them to the object a. What is the class of this object?\n4. Now use the square brackets to extract the state abbreviations and assign them to the object b. Use the identical function to determine if a and b are the same.\n5. We saw that the region column stores a factor. You can corroborate this by typing:\n\nclass(murders$region)\n\nWith one line of code, use the function levels and length to determine the number of regions defined by this dataset.\n6. The function table takes a vector and returns the frequency of each element. You can quickly see how many states are in each region by applying this function. Use this function in one line of code to create a table of states per region.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#vectors-2",
    "href": "R_basics.html#vectors-2",
    "title": "2  R basics",
    "section": "6.6 Vectors",
    "text": "6.6 Vectors\nIn R, the most basic objects available to store data are vectors. As we have seen, complex datasets can usually be broken down into components that are vectors. For example, in a data frame, each column is a vector. Here we learn more about this important class.\n\n6.6.1 Creating vectors\nWe can create vectors using the function c, which stands for concatenate. We use c to concatenate entries in the following way:\n\ncodes &lt;- c(380, 124, 818)\ncodes\n\n[1] 380 124 818\n\n\nWe can also create character vectors. We use the quotes to denote that the entries are characters rather than variable names.\n\ncountry &lt;- c(\"italy\", \"canada\", \"egypt\")\n\nIn R you can also use single quotes:\n\ncountry &lt;- c('italy', 'canada', 'egypt')\n\nBut be careful not to confuse the single quote ’ with the back quote `.\nBy now you should know that if you type:\n\ncountry &lt;- c(italy, canada, egypt)\n\nyou receive an error because the variables italy, canada, and egypt are not defined. If we do not use the quotes, R looks for variables with those names and returns an error.\n\n\n6.6.2 Names\nSometimes it is useful to name the entries of a vector. For example, when defining a vector of country codes, we can use the names to connect the two:\n\ncodes &lt;- c(italy = 380, canada = 124, egypt = 818)\ncodes\n\n italy canada  egypt \n   380    124    818 \n\n\nThe object codes continues to be a numeric vector:\n\nclass(codes)\n\n[1] \"numeric\"\n\n\nbut with names:\n\nnames(codes)\n\n[1] \"italy\"  \"canada\" \"egypt\" \n\n\nIf the use of strings without quotes looks confusing, know that you can use the quotes as well:\n\ncodes &lt;- c(\"italy\" = 380, \"canada\" = 124, \"egypt\" = 818)\ncodes\n\n italy canada  egypt \n   380    124    818 \n\n\nThere is no difference between this function call and the previous one. This is one of the many ways in which R is quirky compared to other languages.\nWe can also assign names using the names functions:\n\ncodes &lt;- c(380, 124, 818)\ncountry &lt;- c(\"italy\",\"canada\",\"egypt\")\nnames(codes) &lt;- country\ncodes\n\n italy canada  egypt \n   380    124    818 \n\n\n\n\n6.6.3 Sequences\nAnother useful function for creating vectors generates sequences:\n\nseq(1, 10)\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\nThe first argument defines the start, and the second defines the end which is included. The default is to go up in increments of 1, but a third argument lets us tell it how much to jump by:\n\nseq(1, 10, 2)\n\n[1] 1 3 5 7 9\n\n\nIf we want consecutive integers, we can use the following shorthand:\n\n1:10\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\nWhen we use these functions, R produces integers, not numerics, because they are typically used to index something:\n\nclass(1:10)\n\n[1] \"integer\"\n\n\nHowever, if we create a sequence including non-integers, the class changes:\n\nclass(seq(1, 10, 0.5))\n\n[1] \"numeric\"\n\n\n\n\n6.6.4 Subsetting\nWe use square brackets to access specific elements of a vector. For the vector codes we defined above, we can access the second element using:\n\ncodes[2]\n\ncanada \n   124 \n\n\nYou can get more than one entry by using a multi-entry vector as an index:\n\ncodes[c(1,3)]\n\nitaly egypt \n  380   818 \n\n\nThe sequences defined above are particularly useful if we want to access, say, the first two elements:\n\ncodes[1:2]\n\n italy canada \n   380    124 \n\n\nIf the elements have names, we can also access the entries using these names. Below are two examples.\n\ncodes[\"canada\"]\n\ncanada \n   124 \n\ncodes[c(\"egypt\",\"italy\")]\n\negypt italy \n  818   380",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#coercion",
    "href": "R_basics.html#coercion",
    "title": "2  R basics",
    "section": "6.7 Coercion",
    "text": "6.7 Coercion\nIn general, coercion is an attempt by R to be flexible with data types. When an entry does not match the expected, some of the prebuilt R functions try to guess what was meant before throwing an error. This can also lead to confusion. Failing to understand coercion can drive programmers crazy when attempting to code in R since it behaves quite differently from most other languages in this regard. Let’s learn about it with some examples.\nWe said that vectors must be all of the same type. So if we try to combine, say, numbers and characters, you might expect an error:\n\nx &lt;- c(1, \"canada\", 3)\n\nBut we don’t get one, not even a warning! What happened? Look at x and its class:\n\nx\n\n[1] \"1\"      \"canada\" \"3\"     \n\nclass(x)\n\n[1] \"character\"\n\n\nR coerced the data into characters. It guessed that because you put a character string in the vector, you meant the 1 and 3 to actually be character strings \"1\" and “3”. The fact that not even a warning is issued is an example of how coercion can cause many unnoticed errors in R.\nR also offers functions to change from one type to another. For example, you can turn numbers into characters with:\n\nx &lt;- 1:5\ny &lt;- as.character(x)\ny\n\n[1] \"1\" \"2\" \"3\" \"4\" \"5\"\n\n\nYou can turn it back with as.numeric:\n\nas.numeric(y)\n\n[1] 1 2 3 4 5\n\n\nThis function is actually quite useful since datasets that include numbers as character strings are common.\n\n6.7.1 Not availables (NA)\nWhen a function tries to coerce one type to another and encounters an impossible case, it usually gives us a warning and turns the entry into a special value called an NA for “not available”. For example:\n\nx &lt;- c(\"1\", \"b\", \"3\")\nas.numeric(x)\n\nWarning: NAs introduced by coercion\n\n\n[1]  1 NA  3\n\n\nR does not have any guesses for what number you want when you type b, so it does not try.\nAs a data scientist you will encounter the NAs often as they are generally used for missing data, a common problem in real-world datasets.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#exercises-2",
    "href": "R_basics.html#exercises-2",
    "title": "2  R basics",
    "section": "6.8 Exercises",
    "text": "6.8 Exercises\n1. Use the function c to create a vector with the average high temperatures in January for Beijing, Lagos, Paris, Rio de Janeiro, San Juan, and Toronto, which are 35, 88, 42, 84, 81, and 30 degrees Fahrenheit. Call the object temp.\n2. Now create a vector with the city names and call the object city.\n3. Use the names function and the objects defined in the previous exercises to associate the temperature data with its corresponding city.\n4. Use the [ and : operators to access the temperature of the first three cities on the list.\n5. Use the [ operator to access the temperature of Paris and San Juan.\n6. Use the : operator to create a sequence of numbers \\(12,13,14,\\dots,73\\).\n7. Create a vector containing all the positive odd numbers smaller than 100.\n8. Create a vector of numbers that starts at 6, does not pass 55, and adds numbers in increments of 4/7: 6, 6 + 4/7, 6 + 8/7, and so on. How many numbers does the list have? Hint: use seq and length.\n9. What is the class of the following object a &lt;- seq(1, 10, 0.5)?\n10. What is the class of the following object a &lt;- seq(1, 10)?\n11. The class of class(a&lt;-1) is numeric, not integer. R defaults to numeric and to force an integer, you need to add the letter L. Confirm that the class of 1L is integer.\n12. Define the following vector:\n\nx &lt;- c(\"1\", \"3\", \"5\")\n\nand coerce it to get integers.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#sorting",
    "href": "R_basics.html#sorting",
    "title": "2  R basics",
    "section": "6.9 Sorting",
    "text": "6.9 Sorting\nNow that we have mastered some basic R knowledge, let’s try to gain some insights into the safety of different states in the context of gun murders.\n\n6.9.1 sort\nSay we want to rank the states from least to most gun murders. The function sort sorts a vector in increasing order. We can therefore see the largest number of gun murders by typing:\n\nlibrary(dslabs)\ndata(murders)\nsort(murders$total)\n\n [1]    2    4    5    5    7    8   11   12   12   16   19   21   22   27   32\n[16]   36   38   53   63   65   67   84   93   93   97   97   99  111  116  118\n[31]  120  135  142  207  219  232  246  250  286  293  310  321  351  364  376\n[46]  413  457  517  669  805 1257\n\n\nHowever, this does not give us information about which states have which murder totals. For example, we don’t know which state had 1257.\n\n\n6.9.2 order\nThe function order is closer to what we want. It takes a vector as input and returns the vector of indexes that sorts the input vector. This may sound confusing so let’s look at a simple example. We can create a vector and sort it:\n\nx &lt;- c(31, 4, 15, 92, 65)\nsort(x)\n\n[1]  4 15 31 65 92\n\n\nRather than sort the input vector, the function order returns the index that sorts input vector:\n\nindex &lt;- order(x)\nx[index]\n\n[1]  4 15 31 65 92\n\n\nThis is the same output as that returned by sort(x). If we look at this index, we see why it works:\n\nx\n\n[1] 31  4 15 92 65\n\norder(x)\n\n[1] 2 3 1 5 4\n\n\nThe second entry of x is the smallest, so order(x) starts with 2. The next smallest is the third entry, so the second entry is 3 and so on.\nHow does this help us order the states by murders? First, remember that the entries of vectors you access with $ follow the same order as the rows in the table. For example, these two vectors containing state names and abbreviations, respectively, are matched by their order:\n\nmurders$state[1:6]\n\n[1] \"Alabama\"    \"Alaska\"     \"Arizona\"    \"Arkansas\"   \"California\"\n[6] \"Colorado\"  \n\nmurders$abb[1:6]\n\n[1] \"AL\" \"AK\" \"AZ\" \"AR\" \"CA\" \"CO\"\n\n\nThis means we can order the state names by their total murders. We first obtain the index that orders the vectors according to murder totals and then index the state names vector:\n\nind &lt;- order(murders$total) \nmurders$abb[ind] \n\n [1] \"VT\" \"ND\" \"NH\" \"WY\" \"HI\" \"SD\" \"ME\" \"ID\" \"MT\" \"RI\" \"AK\" \"IA\" \"UT\" \"WV\" \"NE\"\n[16] \"OR\" \"DE\" \"MN\" \"KS\" \"CO\" \"NM\" \"NV\" \"AR\" \"WA\" \"CT\" \"WI\" \"DC\" \"OK\" \"KY\" \"MA\"\n[31] \"MS\" \"AL\" \"IN\" \"SC\" \"TN\" \"AZ\" \"NJ\" \"VA\" \"NC\" \"MD\" \"OH\" \"MO\" \"LA\" \"IL\" \"GA\"\n[46] \"MI\" \"PA\" \"NY\" \"FL\" \"TX\" \"CA\"\n\n\nAccording to the above, California had the most murders.\n\n\n6.9.3 max and which.max\nIf we are only interested in the entry with the largest value, we can use max for the value:\n\nmax(murders$total)\n\n[1] 1257\n\n\nand which.max for the index of the largest value:\n\ni_max &lt;- which.max(murders$total)\nmurders$state[i_max]\n\n[1] \"California\"\n\n\nFor the minimum, we can use min and which.min in the same way.\nDoes this mean California is the most dangerous state? In an upcoming section, we argue that we should be considering rates instead of totals. Before doing that, we introduce one last order-related function: rank.\n\n\n6.9.4 rank\nAlthough not as frequently used as order and sort, the function rank is also related to order and can be useful. For any given vector it returns a vector with the rank of the first entry, second entry, etc., of the input vector. Here is a simple example:\n\nx &lt;- c(31, 4, 15, 92, 65)\nrank(x)\n\n[1] 3 1 2 5 4\n\n\nTo summarize, let’s look at the results of the three functions we have introduced:\n\n\n\n\n\noriginal\nsort\norder\nrank\n\n\n\n\n31\n4\n2\n3\n\n\n4\n15\n3\n1\n\n\n15\n31\n1\n2\n\n\n92\n65\n5\n5\n\n\n65\n92\n4\n4\n\n\n\n\n\n\n\n\n\n6.9.5 Beware of recycling\nAnother common source of unnoticed errors in R is the use of recycling. We saw that vectors are added elementwise. So if the vectors don’t match in length, it is natural to assume that we should get an error. But we don’t. Notice what happens:\n\nx &lt;- c(1,2,3)\ny &lt;- c(10, 20, 30, 40, 50, 60, 70)\nx+y\n\nWarning in x + y: longer object length is not a multiple of shorter object\nlength\n\n\n[1] 11 22 33 41 52 63 71\n\n\nWe do get a warning, but no error. For the output, R has recycled the numbers in x. Notice the last digit of numbers in the output.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#exercises-3",
    "href": "R_basics.html#exercises-3",
    "title": "2  R basics",
    "section": "6.10 Exercises",
    "text": "6.10 Exercises\nFor these exercises we will use the US murders dataset. Make sure you load it prior to starting.\n\nlibrary(dslabs)\ndata(\"murders\")\n\n1. Use the $ operator to access the population size data and store it as the object pop. Then use the sort function to redefine pop so that it is sorted. Finally, use the [ operator to report the smallest population size.\n2. Now instead of the smallest population size, find the index of the entry with the smallest population size. Hint: use order instead of sort.\n3. We can actually perform the same operation as in the previous exercise using the function which.min. Write one line of code that does this.\n4. Now we know how small the smallest state is and we know which row represents it. Which state is it? Define a variable states to be the state names from the murders data frame. Report the name of the state with the smallest population.\n5. You can create a data frame using the data.frame function. Here is a quick example:\n\ntemp &lt;- c(35, 88, 42, 84, 81, 30)\ncity &lt;- c(\"Beijing\", \"Lagos\", \"Paris\", \"Rio de Janeiro\", \n          \"San Juan\", \"Toronto\")\ncity_temps &lt;- data.frame(name = city, temperature = temp)\n\nUse the rank function to determine the population rank of each state from smallest population size to biggest. Save these ranks in an object called ranks, then create a data frame with the state name and its rank. Call the data frame my_df.\n6. Repeat the previous exercise, but this time order my_df so that the states are ordered from least populous to most populous. Hint: create an object ind that stores the indexes needed to order the population values. Then use the bracket operator [ to re-order each column in the data frame.\n7. The na_example vector represents a series of counts. You can quickly examine the object using:\n\ndata(\"na_example\")  \nstr(na_example)\n\n int [1:1000] 2 1 3 2 1 3 1 4 3 2 ...\n\n\nHowever, when we compute the average with the function mean, we obtain an NA:\n\nmean(na_example)\n\n[1] NA\n\n\nThe is.na function returns a logical vector that tells us which entries are NA. Assign this logical vector to an object called ind and determine how many NAs does na_example have.\n8. Now compute the average again, but only for the entries that are not NA. Hint: remember the ! operator.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#vector-arithmetics",
    "href": "R_basics.html#vector-arithmetics",
    "title": "2  R basics",
    "section": "6.11 Vector arithmetics",
    "text": "6.11 Vector arithmetics\nCalifornia had the most murders, but does this mean it is the most dangerous state? What if it just has many more people than any other state? We can quickly confirm that California indeed has the largest population:\n\nlibrary(dslabs)\ndata(\"murders\")\nmurders$state[which.max(murders$population)]\n\n[1] \"California\"\n\n\nwith over 37 million inhabitants. It is therefore unfair to compare the totals if we are interested in learning how safe the state is. What we really should be computing is the murders per capita. The reports we describe in the motivating section used murders per 100,000 as the unit. To compute this quantity, the powerful vector arithmetic capabilities of R come in handy.\n\n6.11.1 Rescaling a vector\nIn R, arithmetic operations on vectors occur element-wise. For a quick example, suppose we have height in inches:\n\ninches &lt;- c(69, 62, 66, 70, 70, 73, 67, 73, 67, 70)\n\nand want to convert to centimeters. Notice what happens when we multiply inches by 2.54:\n\ninches * 2.54\n\n [1] 175.26 157.48 167.64 177.80 177.80 185.42 170.18 185.42 170.18 177.80\n\n\nIn the line above, we multiplied each element by 2.54. Similarly, if for each entry we want to compute how many inches taller or shorter than 69 inches, the average height for males, we can subtract it from every entry like this:\n\ninches - 69\n\n [1]  0 -7 -3  1  1  4 -2  4 -2  1\n\n\n\n\n6.11.2 Two vectors\nIf we have two vectors of the same length, and we sum them in R, they will be added entry by entry as follows:\n\\[\n\\begin{pmatrix}\na\\\\\nb\\\\\nc\\\\\nd\n\\end{pmatrix}\n+\n\\begin{pmatrix}\ne\\\\\nf\\\\\ng\\\\\nh\n\\end{pmatrix}\n=\n\\begin{pmatrix}\na +e\\\\\nb + f\\\\\nc + g\\\\\nd + h\n\\end{pmatrix}\n\\]\nThe same holds for other mathematical operations, such as -, * and /.\nThis implies that to compute the murder rates we can simply type:\n\nmurder_rate &lt;- murders$total / murders$population * 100000\n\nOnce we do this, we notice that California is no longer near the top of the list. In fact, we can use what we have learned to order the states by murder rate:\n\nmurders$abb[order(murder_rate)]\n\n [1] \"VT\" \"NH\" \"HI\" \"ND\" \"IA\" \"ID\" \"UT\" \"ME\" \"WY\" \"OR\" \"SD\" \"MN\" \"MT\" \"CO\" \"WA\"\n[16] \"WV\" \"RI\" \"WI\" \"NE\" \"MA\" \"IN\" \"KS\" \"NY\" \"KY\" \"AK\" \"OH\" \"CT\" \"NJ\" \"AL\" \"IL\"\n[31] \"OK\" \"NC\" \"NV\" \"VA\" \"AR\" \"TX\" \"NM\" \"CA\" \"FL\" \"TN\" \"PA\" \"AZ\" \"GA\" \"MS\" \"MI\"\n[46] \"DE\" \"SC\" \"MD\" \"MO\" \"LA\" \"DC\"",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#exercises-4",
    "href": "R_basics.html#exercises-4",
    "title": "2  R basics",
    "section": "6.12 Exercises",
    "text": "6.12 Exercises\n1. Previously we created this data frame:\n\ntemp &lt;- c(35, 88, 42, 84, 81, 30)\ncity &lt;- c(\"Beijing\", \"Lagos\", \"Paris\", \"Rio de Janeiro\", \n          \"San Juan\", \"Toronto\")\ncity_temps &lt;- data.frame(name = city, temperature = temp)\n\nRemake the data frame using the code above, but add a line that converts the temperature from Fahrenheit to Celsius. The conversion is \\(C = \\frac{5}{9} \\times (F - 32)\\).\n2. What is the following sum \\(1+1/2^2 + 1/3^2 + \\dots 1/100^2\\)? Hint: thanks to Euler, we know it should be close to \\(\\pi^2/6\\).\n3. Compute the per 100,000 murder rate for each state and store it in the object murder_rate. Then compute the average murder rate for the US using the function mean. What is the average?",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#indexing",
    "href": "R_basics.html#indexing",
    "title": "2  R basics",
    "section": "6.13 Indexing",
    "text": "6.13 Indexing\nR provides a powerful and convenient way of indexing vectors. We can, for example, subset a vector based on properties of another vector. In this section, we continue working with our US murders example, which we can load like this:\n\nlibrary(dslabs)\ndata(\"murders\")\n\n\n6.13.1 Subsetting with logicals\nWe have now calculated the murder rate using:\n\nmurder_rate &lt;- murders$total / murders$population * 100000 \n\nImagine you are moving from Italy where, according to an ABC news report, the murder rate is only 0.71 per 100,000. You would prefer to move to a state with a similar murder rate. Another powerful feature of R is that we can use logicals to index vectors. If we compare a vector to a single number, it actually performs the test for each entry. The following is an example related to the question above:\n\nind &lt;- murder_rate &lt; 0.71\n\nIf we instead want to know if a value is less or equal, we can use:\n\nind &lt;- murder_rate &lt;= 0.71\n\nNote that we get back a logical vector with TRUE for each entry smaller than or equal to 0.71. To see which states these are, we can leverage the fact that vectors can be indexed with logicals.\n\nmurders$state[ind]\n\n[1] \"Hawaii\"        \"Iowa\"          \"New Hampshire\" \"North Dakota\" \n[5] \"Vermont\"      \n\n\nIn order to count how many are TRUE, the function sum returns the sum of the entries of a vector and logical vectors get coerced to numeric with TRUE coded as 1 and FALSE as 0. Thus we can count the states using:\n\nsum(ind)\n\n[1] 5\n\n\n\n\n6.13.2 Logical operators\nSuppose we like the mountains and we want to move to a safe state in the western region of the country. We want the murder rate to be at most 1. In this case, we want two different things to be true. Here we can use the logical operator and, which in R is represented with &. This operation results in TRUE only when both logicals are TRUE. To see this, consider this example:\n\nTRUE & TRUE\n\n[1] TRUE\n\nTRUE & FALSE\n\n[1] FALSE\n\nFALSE & FALSE\n\n[1] FALSE\n\n\nFor our example, we can form two logicals:\n\nwest &lt;- murders$region == \"West\"\nsafe &lt;- murder_rate &lt;= 1\n\nand we can use the & to get a vector of logicals that tells us which states satisfy both conditions:\n\nind &lt;- safe & west\nmurders$state[ind]\n\n[1] \"Hawaii\"  \"Idaho\"   \"Oregon\"  \"Utah\"    \"Wyoming\"\n\n\n\n\n6.13.3 which\nSuppose we want to look up California’s murder rate. For this type of operation, it is convenient to convert vectors of logicals into indexes instead of keeping long vectors of logicals. The function which tells us which entries of a logical vector are TRUE. So we can type:\n\nind &lt;- which(murders$state == \"California\")\nmurder_rate[ind]\n\n[1] 3.374138\n\n\n\n\n6.13.4 match\nIf instead of just one state we want to find out the murder rates for several states, say New York, Florida, and Texas, we can use the function match. This function tells us which indexes of a second vector match each of the entries of a first vector:\n\nind &lt;- match(c(\"New York\", \"Florida\", \"Texas\"), murders$state)\nind\n\n[1] 33 10 44\n\n\nNow we can look at the murder rates:\n\nmurder_rate[ind]\n\n[1] 2.667960 3.398069 3.201360\n\n\n\n\n6.13.5 %in%\nIf rather than an index we want a logical that tells us whether or not each element of a first vector is in a second, we can use the function %in%. Let’s imagine you are not sure if Boston, Dakota, and Washington are states. You can find out like this:\n\nc(\"Boston\", \"Dakota\", \"Washington\") %in% murders$state\n\n[1] FALSE FALSE  TRUE\n\n\nNote that we will be using %in% often throughout the book.\nAdvanced: There is a connection between match and %in% through which. To see this, notice that the following two lines produce the same index (although in different order):\n\nmatch(c(\"New York\", \"Florida\", \"Texas\"), murders$state)\n\n[1] 33 10 44\n\nwhich(murders$state%in%c(\"New York\", \"Florida\", \"Texas\"))\n\n[1] 10 33 44",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#exercises-5",
    "href": "R_basics.html#exercises-5",
    "title": "2  R basics",
    "section": "6.14 Exercises",
    "text": "6.14 Exercises\nStart by loading the library and data.\n\nlibrary(dslabs)\ndata(murders)\n\n1. Compute the per 100,000 murder rate for each state and store it in an object called murder_rate. Then use logical operators to create a logical vector named low that tells us which entries of murder_rate are lower than 1.\n2. Now use the results from the previous exercise and the function which to determine the indices of murder_rate associated with values lower than 1.\n3. Use the results from the previous exercise to report the names of the states with murder rates lower than 1.\n4. Now extend the code from exercises 2 and 3 to report the states in the Northeast with murder rates lower than 1. Hint: use the previously defined logical vector low and the logical operator &.\n5. In a previous exercise we computed the murder rate for each state and the average of these numbers. How many states are below the average?\n6. Use the match function to identify the states with abbreviations AK, MI, and IA. Hint: start by defining an index of the entries of murders$abb that match the three abbreviations, then use the [ operator to extract the states.\n7. Use the %in% operator to create a logical vector that answers the question: which of the following are actual abbreviations: MA, ME, MI, MO, MU?\n8. Extend the code you used in exercise 7 to report the one entry that is not an actual abbreviation. Hint: use the ! operator, which turns FALSE into TRUE and vice versa, then which to obtain an index.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#basic-plots",
    "href": "R_basics.html#basic-plots",
    "title": "2  R basics",
    "section": "6.15 Basic plots",
    "text": "6.15 Basic plots\nIn Chapter @ref(ggplot2) we describe an add-on package that provides a powerful approach to producing plots in R. We then have an entire part on Data Visualization in which we provide many examples. Here we briefly describe some of the functions that are available in a basic R installation.\n\n6.15.1 plot\nThe plot function can be used to make scatterplots. Here is a plot of total murders versus population.\n\nx &lt;- murders$population / 10^6\ny &lt;- murders$total\nplot(x, y)\n\n\n\n\n\n\n\n\n\n\nFor a quick plot that avoids accessing variables twice, we can use the with function:\n\nwith(murders, plot(population, total))\n\nThe function with lets us use the murders column names in the plot function. It also works with any data frames and any function.\n\n\n6.15.2 hist\nWe will describe histograms as they relate to distributions in the Data Visualization part of the book. Here we will simply note that histograms are a powerful graphical summary of a list of numbers that gives you a general overview of the types of values you have. We can make a histogram of our murder rates by simply typing:\n\nx &lt;- with(murders, total / population * 100000)\nhist(x)\n\n\n\n\n\n\n\n\n\n\nWe can see that there is a wide range of values with most of them between 2 and 3 and one very extreme case with a murder rate of more than 15:\n\nmurders$state[which.max(x)]\n\n[1] \"District of Columbia\"\n\n\n\n\n6.15.3 boxplot\nBoxplots will also be described in the Data Visualization part of the book. They provide a more terse summary than histograms, but they are easier to stack with other boxplots. For example, here we can use them to compare the different regions:\n\nmurders$rate &lt;- with(murders, total / population * 100000)\nboxplot(rate~region, data = murders)\n\n\n\n\n\n\n\n\n\n\nWe can see that the South has higher murder rates than the other three regions.\n\n\n6.15.4 image\nThe image function displays the values in a matrix using color. Here is a quick example:\n\nx &lt;- matrix(1:120, 12, 10)\nimage(x)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#exercises-6",
    "href": "R_basics.html#exercises-6",
    "title": "2  R basics",
    "section": "6.16 Exercises",
    "text": "6.16 Exercises\n1. We made a plot of total murders versus population and noted a strong relationship. Not surprisingly, states with larger populations had more murders.\n\nlibrary(dslabs)\ndata(murders)\npopulation_in_millions &lt;- murders$population/10^6\ntotal_gun_murders &lt;- murders$total\nplot(population_in_millions, total_gun_murders)\n\nKeep in mind that many states have populations below 5 million and are bunched up. We may gain further insights from making this plot in the log scale. Transform the variables using the log10 transformation and then plot them.\n2. Create a histogram of the state populations.\n3. Generate boxplots of the state populations by region.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "R_basics.html#footnotes",
    "href": "R_basics.html#footnotes",
    "title": "2  R basics",
    "section": "",
    "text": "https://rstudio.cloud↩︎\nhttps://rafalab.github.io/dsbook/installing-r-rstudio.html↩︎\nhttp://abcnews.go.com/blogs/headlines/2012/12/us-gun-ownership-homicide-rate-higher-than-other-developed-countries/↩︎\nhttp://adv-r.had.co.nz/Style.html↩︎",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "Programming_Basics.html",
    "href": "Programming_Basics.html",
    "title": "3  Programming Basics",
    "section": "",
    "text": "3.1 Conditional expressions\nConditional expressions are one of the basic features of programming. They are used for what is called flow control. The most common conditional expression is the if-else statement. In R, we can actually perform quite a bit of data analysis without conditionals. However, they do come up occasionally, and you will need them once you start writing your own functions and packages.\nHere is a very simple example showing the general structure of an if-else statement. The basic idea is to print the reciprocal of a unless a is 0:\na &lt;- 0\n\nif(a!=0){\n  print(1/a)\n} else{\n  print(\"No reciprocal for 0.\")\n}\n\n[1] \"No reciprocal for 0.\"\nLet’s look at one more example using the US murders data frame:\nlibrary(dslabs)\ndata(murders)\nmurder_rate &lt;- murders$total / murders$population*100000\nHere is a very simple example that tells us which states, if any, have a murder rate lower than 0.5 per 100,000. The if statement protects us from the case in which no state satisfies the condition.\nind &lt;- which.min(murder_rate)\n\nif(murder_rate[ind] &lt; 0.5){\n  print(murders$state[ind]) \n} else{\n  print(\"No state has murder rate that low\")\n}\n\n[1] \"Vermont\"\nIf we try it again with a rate of 0.25, we get a different answer:\nif(murder_rate[ind] &lt; 0.25){\n  print(murders$state[ind]) \n} else{\n  print(\"No state has a murder rate that low.\")\n}\n\n[1] \"No state has a murder rate that low.\"\nA related function that is very useful is ifelse. This function takes three arguments: a logical and two possible answers. If the logical is TRUE, the value in the second argument is returned and if FALSE, the value in the third argument is returned. Here is an example:\na &lt;- 0\nifelse(a &gt; 0, 1/a, NA)\n\n[1] NA\nThe function is particularly useful because it works on vectors. It examines each entry of the logical vector and returns elements from the vector provided in the second argument, if the entry is TRUE, or elements from the vector provided in the third argument, if the entry is FALSE.\na &lt;- c(0, 1, 2, -4, 5)\nresult &lt;- ifelse(a &gt; 0, 1/a, NA)\nThis table helps us see what happened:\na\nis_a_positive\nanswer1\nanswer2\nresult\n\n\n\n\n0\nFALSE\nInf\nNA\nNA\n\n\n1\nTRUE\n1.00\nNA\n1.0\n\n\n2\nTRUE\n0.50\nNA\n0.5\n\n\n-4\nFALSE\n-0.25\nNA\nNA\n\n\n5\nTRUE\n0.20\nNA\n0.2\nHere is an example of how this function can be readily used to replace all the missing values in a vector with zeros:\ndata(na_example)\nno_nas &lt;- ifelse(is.na(na_example), 0, na_example) \nsum(is.na(no_nas))\n\n[1] 0\nTwo other useful functions are any and all. The any function takes a vector of logicals and returns TRUE if any of the entries is TRUE. The all function takes a vector of logicals and returns TRUE if all of the entries are TRUE. Here is an example:\nz &lt;- c(TRUE, TRUE, FALSE)\nany(z)\n\n[1] TRUE\n\nall(z)\n\n[1] FALSE",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Programming Basics</span>"
    ]
  },
  {
    "objectID": "Programming_Basics.html#defining-functions",
    "href": "Programming_Basics.html#defining-functions",
    "title": "3  Programming Basics",
    "section": "3.2 Defining functions",
    "text": "3.2 Defining functions\nAs you become more experienced, you will find yourself needing to perform the same operations over and over. A simple example is computing averages. We can compute the average of a vector x using the sum and length functions: sum(x)/length(x). Because we do this repeatedly, it is much more efficient to write a function that performs this operation. This particular operation is so common that someone already wrote the mean function and it is included in base R. However, you will encounter situations in which the function does not already exist, so R permits you to write your own. A simple version of a function that computes the average can be defined like this:\n\navg &lt;- function(x){\n  s &lt;- sum(x)\n  n &lt;- length(x)\n  s/n\n}\n\nNow avg is a function that computes the mean:\n\nx &lt;- 1:100\nidentical(mean(x), avg(x))\n\n[1] TRUE\n\n\nNotice that variables defined inside a function are not saved in the workspace. So while we use s and n when we call avg, the values are created and changed only during the call. Here is an illustrative example:\n\ns &lt;- 3\navg(1:10)\n\n[1] 5.5\n\ns\n\n[1] 3\n\n\nNote how s is still 3 after we call avg.\nIn general, functions are objects, so we assign them to variable names with &lt;-. The function function tells R you are about to define a function. The general form of a function definition looks like this:\n\nmy_function &lt;- function(VARIABLE_NAME){\n  perform operations on VARIABLE_NAME and calculate VALUE\n  VALUE\n}\n\nThe functions you define can have multiple arguments as well as default values. For example, we can define a function that computes either the arithmetic or geometric average depending on a user defined variable like this:\n\navg &lt;- function(x, arithmetic = TRUE){\n  n &lt;- length(x)\n  ifelse(arithmetic, sum(x)/n, prod(x)^(1/n))\n}\n\nWe will learn more about how to create functions through experience as we face more complex tasks.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Programming Basics</span>"
    ]
  },
  {
    "objectID": "Programming_Basics.html#namespaces",
    "href": "Programming_Basics.html#namespaces",
    "title": "3  Programming Basics",
    "section": "3.3 Namespaces",
    "text": "3.3 Namespaces\nOnce you start becoming more of an R expert user, you will likely need to load several add-on packages for some of your analysis. Once you start doing this, it is likely that two packages use the same name for two different functions. And often these functions do completely different things. In fact, you have already encountered this because both dplyr and the R-base stats package define a filter function. There are five other examples in dplyr. We know this because when we first load dplyr we see the following message:\nThe following objects are masked from ‘package:stats’:\n\n    filter, lag\n\nThe following objects are masked from ‘package:base’:\n\n    intersect, setdiff, setequal, union\nSo what does R do when we type filter? Does it use the dplyr function or the stats function? From our previous work we know it uses the dplyr one. But what if we want to use the stats version?\nThese functions live in different namespaces. R will follow a certain order when searching for a function in these namespaces. You can see the order by typing:\n\nsearch()\n\nThe first entry in this list is the global environment which includes all the objects you define.\nSo what if we want to use the stats filter instead of the dplyr filter but dplyr appears first in the search list? You can force the use of a specific namespace by using double colons (::) like this:\n\nstats::filter\n\nIf we want to be absolutely sure that we use the dplyr filter, we can use\n\ndplyr::filter\n\nAlso note that if we want to use a function in a package without loading the entire package, we can use the double colon as well.\nFor more on this more advanced topic we recommend the R packages book1.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Programming Basics</span>"
    ]
  },
  {
    "objectID": "Programming_Basics.html#for-loops",
    "href": "Programming_Basics.html#for-loops",
    "title": "3  Programming Basics",
    "section": "3.4 For-loops",
    "text": "3.4 For-loops\nThe formula for the sum of the series \\(1+2+\\dots+n\\) is \\(n(n+1)/2\\). What if we weren’t sure that was the right function? How could we check? Using what we learned about functions we can create one that computes the \\(S_n\\):\n\ncompute_s_n &lt;- function(n){\n  x &lt;- 1:n\n  sum(x)\n}\n\nHow can we compute \\(S_n\\) for various values of \\(n\\), say \\(n=1,\\dots,25\\)? Do we write 25 lines of code calling compute_s_n? No, that is what for-loops are for in programming. In this case, we are performing exactly the same task over and over, and the only thing that is changing is the value of \\(n\\). For-loops let us define the range that our variable takes (in our example \\(n=1,\\dots,10\\)), then change the value and evaluate expression as you loop.\nPerhaps the simplest example of a for-loop is this useless piece of code:\n\nfor(i in 1:5){\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n\nHere is the for-loop we would write for our \\(S_n\\) example:\n\nm &lt;- 25\ns_n &lt;- vector(length = m) # create an empty vector\nfor(n in 1:m){\n  s_n[n] &lt;- compute_s_n(n)\n}\n\nIn each iteration \\(n=1\\), \\(n=2\\), etc…, we compute \\(S_n\\) and store it in the \\(n\\)th entry of s_n.\nNow we can create a plot to search for a pattern:\n\nn &lt;- 1:m\nplot(n, s_n)\n\n\n\n\n\n\n\n\n\n\nIf you noticed that it appears to be a quadratic, you are on the right track because the formula is \\(n(n+1)/2\\).",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Programming Basics</span>"
    ]
  },
  {
    "objectID": "Programming_Basics.html#vectorization",
    "href": "Programming_Basics.html#vectorization",
    "title": "3  Programming Basics",
    "section": "3.5 Vectorization and functionals",
    "text": "3.5 Vectorization and functionals\nAlthough for-loops are an important concept to understand, in R we rarely use them. As you learn more R, you will realize that vectorization is preferred over for-loops since it results in shorter and clearer code. We already saw examples in the Vector Arithmetic section. A vectorized function is a function that will apply the same operation on each of the vectors.\n\nx &lt;- 1:10\nsqrt(x)\n\n [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427\n [9] 3.000000 3.162278\n\ny &lt;- 1:10\nx*y\n\n [1]   1   4   9  16  25  36  49  64  81 100\n\n\nTo make this calculation, there is no need for for-loops. However, not all functions work this way. For instance, the function we just wrote, compute_s_n, does not work element-wise since it is expecting a scalar. This piece of code does not run the function on each entry of n:\n\nn &lt;- 1:25\ncompute_s_n(n)\n\nFunctionals are functions that help us apply the same function to each entry in a vector, matrix, data frame, or list. Here we cover the functional that operates on numeric, logical, and character vectors: sapply.\nThe function sapply permits us to perform element-wise operations on any function. Here is how it works:\n\nx &lt;- 1:10\nsapply(x, sqrt)\n\n [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427\n [9] 3.000000 3.162278\n\n\nEach element of x is passed on to the function sqrt and the result is returned. These results are concatenated. In this case, the result is a vector of the same length as the original x. This implies that the for-loop above can be written as follows:\n\nn &lt;- 1:25\ns_n &lt;- sapply(n, compute_s_n)\n\nOther functionals are apply, lapply, tapply, mapply, vapply, and replicate. We mostly use sapply, apply, and replicate in this book, but we recommend familiarizing yourselves with the others as they can be very useful.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Programming Basics</span>"
    ]
  },
  {
    "objectID": "Programming_Basics.html#exercises",
    "href": "Programming_Basics.html#exercises",
    "title": "3  Programming Basics",
    "section": "3.6 Exercises",
    "text": "3.6 Exercises\n1. What will this conditional expression return?\n\nx &lt;- c(1,2,-3,4)\n\nif(all(x&gt;0)){\n  print(\"All Postives\")\n} else{\n  print(\"Not all positives\")\n}\n\n2. Which of the following expressions is always FALSE when at least one entry of a logical vector x is TRUE?\n\nall(x)\nany(x)\nany(!x)\nall(!x)\n\n3. The function nchar tells you how many characters long a character vector is. Write a line of code that assigns to the object new_names the state abbreviation when the state name is longer than 8 characters.\n4. Create a function sum_n that for any given value, say \\(n\\), computes the sum of the integers from 1 to n (inclusive). Use the function to determine the sum of integers from 1 to 5,000.\n5. Create a function altman_plot that takes two arguments, x and y, and plots the difference against the sum.\n6. After running the code below, what is the value of x?\n\nx &lt;- 3\nmy_func &lt;- function(y){\n  x &lt;- 5\n  y+5\n}\n\n7. Write a function compute_s_n that for any given \\(n\\) computes the sum \\(S_n = 1^2 + 2^2 + 3^2 + \\dots n^2\\). Report the value of the sum when \\(n=10\\).\n8. Define an empty numerical vector s_n of size 25 using s_n &lt;- vector(\"numeric\", 25) and store in the results of \\(S_1, S_2, \\dots S_{25}\\) using a for-loop.\n9. Repeat exercise 8, but this time use sapply.\n10. Repeat exercise 8, but this time use map_dbl.\n11. Plot \\(S_n\\) versus \\(n\\). Use points defined by \\(n=1,\\dots,25\\).\n12. Confirm that the formula for this sum is \\(S_n= n(n+1)(2n+1)/6\\).",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Programming Basics</span>"
    ]
  },
  {
    "objectID": "Programming_Basics.html#footnotes",
    "href": "Programming_Basics.html#footnotes",
    "title": "3  Programming Basics",
    "section": "",
    "text": "http://r-pkgs.had.co.nz/namespace.html↩︎",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Programming Basics</span>"
    ]
  }
]