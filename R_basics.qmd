# R basics

## Math and assigning variables

```{r}
3+4

y <- 3+4

y

y_log <- log(y)

y_log
```

```{r}

```

# Why use `R`?

## {}
- R is a _statistical_ programming language (derived from S)
- Superb data management & graphics capabilities
- You can write your own functions
- Powerful and flexible
- Runs on all computer platforms
- Well established system of packages and documentation
- Active development and dedicated community
- Can use a nice GUI front end such as `Rstudio`
- Reproducibility 
    - keep your scripts to see exactly what was done
    - distribute these with your data
    - embed your `R` analyses in polished `RMarkdown` files
- FREE
    
## {.flexbox .vcenter}
```{r, echo=FALSE, out.width='35%'}
knitr::include_graphics("images/volcano_plot.png")
knitr::include_graphics("images/rainbow_boxplot.png")
knitr::include_graphics("images/blob_plot.png")
knitr::include_graphics("images/Stacked_barplot.png")

```

## `R` resources  {.flexbox .vcenter}

- The R Project Homepage: http://www.r-project.org
- Quick R Homepage: http://www.statmethods.net
- Bioconductor: http://www.bioconductor.org    
- An Introduction to R (long!): http://cran.r-project.org/doc/manuals/R-intro.html
- R for Data Science: https://r4ds.had.co.nz
- Google - tutorials, guides, demos, packages and more

## Running `R` {.flexbox .vcenter}
- Need to make sure that you have `R` installed 
    - locally or on a server
    - https://www.r-project.org
  
- Run R from the command line
    - just type `R`
    - can run it locally as well as on clusters

- Install a R *Integrated Development Environment* (IDE)
    - RStudio: http://www.rstudio.com
    - Makes working with R much easier, particularly for a new R user
    - Run on Windows, Mac or Linux OS
    - We're running as a server on the AWS instances

## `RStudio` {.flexbox .vcenter}

```{r, echo=FALSE, out.width='75%', fig.align='center'}
knitr::include_graphics("images/RStudio_Screenshot.png")
```


## Exercise 1.1 - Exploring `RStudio` {}
- Open `RStudio` by adding `:8787` to your AMI url   
- Take a few minutes to familiarize yourself with the `Rstudio` environment by locating the following features:
    - See what types of new files can be made in `Rstudio` by clicking the top left icon- open a new R script.
    - The windows clockwise from top left are: the code editor, the workspace and history, the plots and files window, and the R console.
    - In the plots and files window, click on the packages and help tabs to see what they offer. 
- Now open the file called *Exercises_for_R_Lectures.Rmd* in /workshop_materials/evomics_stat_2019/03.Exercises/ 
    - This file will serve as your digital notebook for parts of the workshop and contains the other exercises.

___________________

# Introduction to `RMarkdown`

## `RMarkdown` {.flexbox .vcenter}

- A great way to embed `R code` into descriptive files to keep your life organized
    - http://kbroman.org/knitr_knutshell/pages/Rmarkdown.html
    - https://bookdown.org/yihui/rmarkdown/
    - https://bookdown.org/yihui/bookdown/
- You can insert `R chunks` into `Rmarkdown` documents
- You will be doing more with markdown on Thursday

## Exercise 1.2 - Intro to `RMarkdown` Files

- Take a few minutes to familiarize yourself with RMarkdown files by completing exercise 1.2 in your exercises document.

___________________

# BASICS of `R` 

## BASICS of `R` {}

- Commands can be submitted through 
    - terminal, console or scripts
    - can be embedded as `code chunks` in RMarkdown
- On these slides evaluating code chunks and showing output
    - shown here after the two `#` symbols
    - the number of output items is in `[]`
- `R` follows the normal priority of mathematical evaluation (PEDMAS)

## BASICS of `R` {}

Input code chunk and then output
```{r basic multiplication, echo=TRUE}
4*4
```

Input code chunk and then output
```{r more multiplication, echo=TRUE}
(4+3*2^2)
```

## Assigning Variables {.flexbox .vcenter}

- A better way to do this is to assign variables
- Variables are assigned values using the `<-` operator.
- Variable names must begin with a letter, but other than that, just about anything goes.
- Do keep in mind that `R` is **case sensitive**.

## Assigning Variables {.flexbox .vcenter}

```{r assigning variables, echo=TRUE, tidy=TRUE}

x <- 2
x*3
y <- x * 3
y-2

```

These do not work

```{r eval=FALSE, echo=TRUE}
3y <- 3
3*y <- 3
```


## Arithmetic operations on functions {}

- Arithmetic operations can be performed easily on functions as well as numbers.

```{r functions, eval = TRUE, echo = TRUE}
x <- 12
x+2
x^2
log(x)
```

## Arithmetic operations on functions {}
- Note that the last of these - `log` - is a built in function of `R`, and therefore the object of the function needs to be put in parentheses
- These parentheses will be important, and we'll come back to them later when we add arguments after the object in the parentheses  
- The outcome of calculations can be assigned to new variables as well, and the results can be checked using the `print` command


## Arithmetic operations on functions {.flexbox .vcenter}

```{r, echo=TRUE}
y <- 67
print(y)

x <- 124
z <- (x*y)^2
print(z)
```

## STRINGS {.flexbox .vcenter}
- Operations can be performed on _character_ variables as well
- Note that "characters" need to be set off by quotation marks to differentiate them from numbers
- The `c` stands for `concatenate`
- Note that we are using the same variable names as we did previously, which means that we're overwriting our previous assignment
- A good rule of thumb is to use new names for each variable, and make them short but still descriptive

## STRINGS {.flexbox .vcenter}

```{r, echo=TRUE}
x <- "I Love"
print (x)
y <- "Biostatistics"
print (y)
z <- c(x,y)
print (z)
```


## VECTORS {.flexbox .vcenter}

- In general `R` thinks in terms of vectors
    - a list of characters, factors or numerical values ("I Love")
    - it will benefit any `R` user to try to write scripts with that in mind
    - it will simplify most things
- Vectors can be assigned directly using the 'c()' function and then entering the exact values.

## VECTORS {.flexbox .vcenter}

```{r Example vectors, echo=TRUE}
n <- c(2,3,4,2,1,2,4,5,10,8,9)
print(n)
```

```{r Example vectors two, echo=TRUE}
z <- n +3
print(z)
```

## FACTORS {.flexbox .vcenter}

- The vector `x` is now what is called a list of character values ("I Love").
- Sometimes we would like to treat the characters as if they were units for subsequent calculations.
- These are called `factors`, and we can redefine our character variables as factors.
- This might seem a bit strange, but itâ€™s important for statistical analyses where we might want to see the mean or variance for two different treatments.

## FACTORS {.flexbox .vcenter}

```{r, eval = TRUE, echo = TRUE}
x_factor <- as.factor(x)
print (x_factor)
```
- Note that factor levels are reported alphabetically

## FACTORS {.flexbox .vcenter}

- We can also determine how `R` "sees" a variable using `str()` or `class()` functions. 
- This is a useful check when importing datasets or verifying that you assigned a class correctly
```{r, eval = TRUE, echo = TRUE}
str(x)
class(x)
```


## Types or 'classes' of vectors of data {.smaller}

```{r, echo=FALSE, out.width='50%', fig.align='center'}
knitr::include_graphics("images/week_3.014.jpeg")
```

## Types of vectors of data {}

- `int` stands for integers  

- `dbl` stands for doubles, or real numbers

- `chr` stands for character vectors, or strings  

- `dttm` stands for date-times (a date + a time)  

- `lgl` stands for logical, vectors that contain only TRUE or FALSE

- `fctr` stands for factors, which R uses to represent categorical variables with fixed possible values  

- `date` stands for dates  

## Types of vectors of data {.smaller}

- Logical vectors can take only three possible values:
    - `FALSE`
    - `TRUE`
    - `NA` which is 'not available'.

- Integer and double vectors are known collectively as numeric vectors.
    - In `R` numbers are doubles by default.

- Integers have one special value: NA, while doubles have four:
    - `NA`
    - `NaN` which is 'not a number'
    - `Inf`
    - `-Inf`

## Basic Statistics {.flexbox .vcenter}

Many functions exist to operate on vectors.
```{r, eval = FALSE, echo = TRUE}
mean(n)
median(n)
var(n)
log(n)
exp(n)
sqrt(n)
sum(n)
length(n)
sample(n, replace = T) #has an additional argument (replace=T)
```
- Arguments modify or direct the function in some way
    - There are many arguments for each function, some of which are defaults
    - Tab complete is helpful to view argument options

## Getting Help {.flexbox .vcenter}

- Getting Help on any function is very easy - just type a question mark and the name of the function.
- There are functions for just about anything within `R` and it is easy enough to write your own functions if none already exist to do what you want to do.
- In general, function calls have a simple structure: a function name, a set of parentheses and an optional set of parameters/arguments to send to the function.
- Help pages exist for all functions that, at a minimum, explain what parameters exist for the function.  


## Getting Help {.flexbox .vcenter}

```{r, eval = FALSE, echo = TRUE}
- help(mean)
- ?mean
- example(mean)
- help.search("mean")
- apropos("mean")
- args(mean)
```

## Creating vectors {}

- Creating a vector of new data by entering it by hand can be a drag
- However, it is also very easy to use functions such as
    - `seq`
    - `sample`

## Creating vectors {}
- What do the arguments mean?
```{r, echo = TRUE}
seq_1 <- seq(0.0, 10.0, by = 0.1)
print(seq_1)
```

## Creating vectors {}
```{r, echo = TRUE}
seq_2 <- seq(10.0, 0.0, by = -0.1)
print(seq_2)
```

## Creating vectors {.smaller}

```{r, echo = TRUE}
seq_square <- (seq_2)*(seq_2)
print(seq_square)
```

## Creating vectors {.smaller}

```{r, echo = TRUE}
seq_square_new <- (seq_2)^2
print(seq_square_new)
```

## R Interlude 

Complete Exercises 1.3-1.6

```{r, echo=FALSE, out.width='50%', fig.align='center'}
knitr::include_graphics("images/Mr_Rog_and_cat.png")
```


## Drawing samples from distributions {.smaller}

- Here is a way to create your own data sets that are random samples...
```{r Samples from distributions 2, out.width='50%', echo = TRUE}
x <- rnorm (n = 10000, mean = 0, sd = 10)
y <- sample (1:10000, 10000, replace = T)
xy <- cbind(x,y)
plot(xy)
```

## Drawing samples from distributions {.smaller}

```{r Samples from distributions 3, out.width='50%', echo = TRUE}
x <- rnorm (10000, 0, 10)
y <- sample (1:10000, 10000, replace = T)
xy <- cbind(x,y)
hist(x)
```

## Drawing samples from distributions {.flexbox .vcenter}

- Youâ€™ve probably figured out that y from the last example is drawing numbers with equal probability.
- What if you want to draw from a distribution?
- Again, play around with the arguments in the parentheses to see what happens.

```{r Samples from distributions 4, out.width='50%', echo = TRUE, eval=F}
x <- rnorm (10000, 0, 10)
y <- sample (???, 10000, replace = ???)
```

## Drawing samples from distributions {.flexbox .vcenter out.width='50%'}

- `dnorm()` generates the probability density, which can be plotted using the `curve()` function.
- Note that is curve is added to the plot using `add=TRUE`

```{r, out.width='30%', echo = TRUE}
x <-rnorm(1000, 0, 100)
hist(x, xlim = c(-500,500))
curve(50000*dnorm(x, 0, 100), xlim = c(-500,500), add=TRUE, col='Red')
```